
04_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003414  000034a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  000034be  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed2  00000000  00000000  00005908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000691a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a759  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 18 	call	0x30b2	; 0x30b2 <main>
      8a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_VoidCSendCommand>:
#include"MDIO_Interface.h"
#include <avr/delay.h>
#include "HkeyPad_interface.h"

void HLCD_VoidCSendCommand (u8 A_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8d 8f       	std	Y+29, r24	; 0x1d
   //make rs zero for command
   MDIO_voidSetPinValue(port_control_lcd,RS,LOW);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
   //make rw one to write data
   MDIO_voidSetPinValue(port_control_lcd,rw,LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
   //send data 
   MDIO_voidSetPortValue(port_data_lcd,A_u8Command);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b74:	0e 94 99 17 	call	0x2f32	; 0x2f32 <MDIO_voidSetPortValue>
   // make enable 1
   MDIO_voidSetPinValue(port_control_lcd,en,HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	89 8f       	std	Y+25, r24	; 0x19
     b8c:	9a 8f       	std	Y+26, r25	; 0x1a
     b8e:	ab 8f       	std	Y+27, r26	; 0x1b
     b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	69 8d       	ldd	r22, Y+25	; 0x19
     b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8d 8b       	std	Y+21, r24	; 0x15
     bac:	9e 8b       	std	Y+22, r25	; 0x16
     bae:	af 8b       	std	Y+23, r26	; 0x17
     bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bb2:	6d 89       	ldd	r22, Y+21	; 0x15
     bb4:	7e 89       	ldd	r23, Y+22	; 0x16
     bb6:	8f 89       	ldd	r24, Y+23	; 0x17
     bb8:	98 8d       	ldd	r25, Y+24	; 0x18
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <HLCD_VoidCSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9c 8b       	std	Y+20, r25	; 0x14
     bd0:	8b 8b       	std	Y+19, r24	; 0x13
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <HLCD_VoidCSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6d 89       	ldd	r22, Y+21	; 0x15
     bd6:	7e 89       	ldd	r23, Y+22	; 0x16
     bd8:	8f 89       	ldd	r24, Y+23	; 0x17
     bda:	98 8d       	ldd	r25, Y+24	; 0x18
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <HLCD_VoidCSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	69 8d       	ldd	r22, Y+25	; 0x19
     bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9c 8b       	std	Y+20, r25	; 0x14
     c12:	8b 8b       	std	Y+19, r24	; 0x13
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <HLCD_VoidCSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9a 8b       	std	Y+18, r25	; 0x12
     c1c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	89 89       	ldd	r24, Y+17	; 0x11
     c20:	9a 89       	ldd	r25, Y+18	; 0x12
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <HLCD_VoidCSendCommand+0xdc>
     c26:	9a 8b       	std	Y+18, r25	; 0x12
     c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9c 8b       	std	Y+20, r25	; 0x14
     c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8b 89       	ldd	r24, Y+19	; 0x13
     c36:	9c 89       	ldd	r25, Y+20	; 0x14
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <HLCD_VoidCSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <HLCD_VoidCSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6d 89       	ldd	r22, Y+21	; 0x15
     c40:	7e 89       	ldd	r23, Y+22	; 0x16
     c42:	8f 89       	ldd	r24, Y+23	; 0x17
     c44:	98 8d       	ldd	r25, Y+24	; 0x18
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	8b 8b       	std	Y+19, r24	; 0x13
     c52:	8b 89       	ldd	r24, Y+19	; 0x13
     c54:	9c 89       	ldd	r25, Y+20	; 0x14
     c56:	98 8b       	std	Y+16, r25	; 0x10
     c58:	8f 87       	std	Y+15, r24	; 0x0f
     c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5c:	98 89       	ldd	r25, Y+16	; 0x10
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <HLCD_VoidCSendCommand+0x118>
     c62:	98 8b       	std	Y+16, r25	; 0x10
     c64:	8f 87       	std	Y+15, r24	; 0x0f
   //delay
   _delay_ms(2); 
   //make enable low
      MDIO_voidSetPinValue(port_control_lcd,en,LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a0 e0       	ldi	r26, 0x00	; 0
     c76:	b0 e4       	ldi	r27, 0x40	; 64
     c78:	8b 87       	std	Y+11, r24	; 0x0b
     c7a:	9c 87       	std	Y+12, r25	; 0x0c
     c7c:	ad 87       	std	Y+13, r26	; 0x0d
     c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c80:	6b 85       	ldd	r22, Y+11	; 0x0b
     c82:	7c 85       	ldd	r23, Y+12	; 0x0c
     c84:	8d 85       	ldd	r24, Y+13	; 0x0d
     c86:	9e 85       	ldd	r25, Y+14	; 0x0e
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	4a ef       	ldi	r20, 0xFA	; 250
     c8e:	54 e4       	ldi	r21, 0x44	; 68
     c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	8f 83       	std	Y+7, r24	; 0x07
     c9a:	98 87       	std	Y+8, r25	; 0x08
     c9c:	a9 87       	std	Y+9, r26	; 0x09
     c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <HLCD_VoidCSendCommand+0x17c>
		__ticks = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9e 83       	std	Y+6, r25	; 0x06
     cbe:	8d 83       	std	Y+5, r24	; 0x05
     cc0:	3f c0       	rjmp	.+126    	; 0xd40 <HLCD_VoidCSendCommand+0x1fa>
	else if (__tmp > 65535)
     cc2:	6f 81       	ldd	r22, Y+7	; 0x07
     cc4:	78 85       	ldd	r23, Y+8	; 0x08
     cc6:	89 85       	ldd	r24, Y+9	; 0x09
     cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	3f ef       	ldi	r19, 0xFF	; 255
     cce:	4f e7       	ldi	r20, 0x7F	; 127
     cd0:	57 e4       	ldi	r21, 0x47	; 71
     cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd6:	18 16       	cp	r1, r24
     cd8:	4c f5       	brge	.+82     	; 0xd2c <HLCD_VoidCSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cda:	6b 85       	ldd	r22, Y+11	; 0x0b
     cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cde:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e2       	ldi	r20, 0x20	; 32
     ce8:	51 e4       	ldi	r21, 0x41	; 65
     cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9e 83       	std	Y+6, r25	; 0x06
     d00:	8d 83       	std	Y+5, r24	; 0x05
     d02:	0f c0       	rjmp	.+30     	; 0xd22 <HLCD_VoidCSendCommand+0x1dc>
     d04:	88 ec       	ldi	r24, 0xC8	; 200
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	9c 83       	std	Y+4, r25	; 0x04
     d0a:	8b 83       	std	Y+3, r24	; 0x03
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <HLCD_VoidCSendCommand+0x1ca>
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	69 f7       	brne	.-38     	; 0xd04 <HLCD_VoidCSendCommand+0x1be>
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <HLCD_VoidCSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2c:	6f 81       	ldd	r22, Y+7	; 0x07
     d2e:	78 85       	ldd	r23, Y+8	; 0x08
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	9e 81       	ldd	r25, Y+6	; 0x06
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <HLCD_VoidCSendCommand+0x206>
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
         _delay_ms(2); 
   

}
     d54:	6d 96       	adiw	r28, 0x1d	; 29
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <HLCD_VoidCSendData>:
void HLCD_VoidCSendData (u8 A_u8Data)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	8d 8f       	std	Y+29, r24	; 0x1d
   //make rs zero for command
   MDIO_voidSetPinValue(port_control_lcd,RS,HIGH);
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
   //make rw one to write data
   MDIO_voidSetPinValue(port_control_lcd,rw,LOW);
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
   //send data 
   MDIO_voidSetPortValue(port_data_lcd,A_u8Data);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d94:	0e 94 99 17 	call	0x2f32	; 0x2f32 <MDIO_voidSetPortValue>
   // make enable 1
   MDIO_voidSetPinValue(port_control_lcd,en,HIGH);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e4       	ldi	r27, 0x40	; 64
     daa:	89 8f       	std	Y+25, r24	; 0x19
     dac:	9a 8f       	std	Y+26, r25	; 0x1a
     dae:	ab 8f       	std	Y+27, r26	; 0x1b
     db0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	69 8d       	ldd	r22, Y+25	; 0x19
     db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8d 8b       	std	Y+21, r24	; 0x15
     dcc:	9e 8b       	std	Y+22, r25	; 0x16
     dce:	af 8b       	std	Y+23, r26	; 0x17
     dd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dd2:	6d 89       	ldd	r22, Y+21	; 0x15
     dd4:	7e 89       	ldd	r23, Y+22	; 0x16
     dd6:	8f 89       	ldd	r24, Y+23	; 0x17
     dd8:	98 8d       	ldd	r25, Y+24	; 0x18
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de6:	88 23       	and	r24, r24
     de8:	2c f4       	brge	.+10     	; 0xdf4 <HLCD_VoidCSendData+0x8e>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <HLCD_VoidCSendData+0x10c>
	else if (__tmp > 65535)
     df4:	6d 89       	ldd	r22, Y+21	; 0x15
     df6:	7e 89       	ldd	r23, Y+22	; 0x16
     df8:	8f 89       	ldd	r24, Y+23	; 0x17
     dfa:	98 8d       	ldd	r25, Y+24	; 0x18
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	4c f5       	brge	.+82     	; 0xe5e <HLCD_VoidCSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	69 8d       	ldd	r22, Y+25	; 0x19
     e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9c 8b       	std	Y+20, r25	; 0x14
     e32:	8b 8b       	std	Y+19, r24	; 0x13
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <HLCD_VoidCSendData+0xee>
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9a 8b       	std	Y+18, r25	; 0x12
     e3c:	89 8b       	std	Y+17, r24	; 0x11
     e3e:	89 89       	ldd	r24, Y+17	; 0x11
     e40:	9a 89       	ldd	r25, Y+18	; 0x12
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <HLCD_VoidCSendData+0xdc>
     e46:	9a 8b       	std	Y+18, r25	; 0x12
     e48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	8b 89       	ldd	r24, Y+19	; 0x13
     e4c:	9c 89       	ldd	r25, Y+20	; 0x14
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9c 8b       	std	Y+20, r25	; 0x14
     e52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	8b 89       	ldd	r24, Y+19	; 0x13
     e56:	9c 89       	ldd	r25, Y+20	; 0x14
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f7       	brne	.-38     	; 0xe36 <HLCD_VoidCSendData+0xd0>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <HLCD_VoidCSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5e:	6d 89       	ldd	r22, Y+21	; 0x15
     e60:	7e 89       	ldd	r23, Y+22	; 0x16
     e62:	8f 89       	ldd	r24, Y+23	; 0x17
     e64:	98 8d       	ldd	r25, Y+24	; 0x18
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9c 8b       	std	Y+20, r25	; 0x14
     e70:	8b 8b       	std	Y+19, r24	; 0x13
     e72:	8b 89       	ldd	r24, Y+19	; 0x13
     e74:	9c 89       	ldd	r25, Y+20	; 0x14
     e76:	98 8b       	std	Y+16, r25	; 0x10
     e78:	8f 87       	std	Y+15, r24	; 0x0f
     e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7c:	98 89       	ldd	r25, Y+16	; 0x10
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <HLCD_VoidCSendData+0x118>
     e82:	98 8b       	std	Y+16, r25	; 0x10
     e84:	8f 87       	std	Y+15, r24	; 0x0f
   //delay
   _delay_ms(2); 
   //make enable low
      MDIO_voidSetPinValue(port_control_lcd,en,LOW);
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	b0 e4       	ldi	r27, 0x40	; 64
     e98:	8b 87       	std	Y+11, r24	; 0x0b
     e9a:	9c 87       	std	Y+12, r25	; 0x0c
     e9c:	ad 87       	std	Y+13, r26	; 0x0d
     e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8f 83       	std	Y+7, r24	; 0x07
     eba:	98 87       	std	Y+8, r25	; 0x08
     ebc:	a9 87       	std	Y+9, r26	; 0x09
     ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <HLCD_VoidCSendData+0x17c>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <HLCD_VoidCSendData+0x1fa>
	else if (__tmp > 65535)
     ee2:	6f 81       	ldd	r22, Y+7	; 0x07
     ee4:	78 85       	ldd	r23, Y+8	; 0x08
     ee6:	89 85       	ldd	r24, Y+9	; 0x09
     ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <HLCD_VoidCSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	6b 85       	ldd	r22, Y+11	; 0x0b
     efc:	7c 85       	ldd	r23, Y+12	; 0x0c
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <HLCD_VoidCSendData+0x1dc>
     f24:	88 ec       	ldi	r24, 0xC8	; 200
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <HLCD_VoidCSendData+0x1ca>
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <HLCD_VoidCSendData+0x1be>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <HLCD_VoidCSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <HLCD_VoidCSendData+0x206>
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01

      _delay_ms(2); 


}
     f74:	6d 96       	adiw	r28, 0x1d	; 29
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <HLCD_VoidInitLCD>:
void HLCD_VoidInitLCD ()
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	e8 97       	sbiw	r28, 0x38	; 56
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinDirection(port_control_lcd,RS,OUTPOT);
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(port_control_lcd,rw,OUTPOT);
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(port_control_lcd,en,OUTPOT);
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
    MDIO_voidSetPortDirection(port_data_lcd,full_port);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	0e 94 57 17 	call	0x2eae	; 0x2eae <MDIO_voidSetPortDirection>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e2       	ldi	r26, 0x20	; 32
     fc6:	b2 e4       	ldi	r27, 0x42	; 66
     fc8:	8d ab       	std	Y+53, r24	; 0x35
     fca:	9e ab       	std	Y+54, r25	; 0x36
     fcc:	af ab       	std	Y+55, r26	; 0x37
     fce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a ef       	ldi	r20, 0xFA	; 250
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	89 ab       	std	Y+49, r24	; 0x31
     fea:	9a ab       	std	Y+50, r25	; 0x32
     fec:	ab ab       	std	Y+51, r26	; 0x33
     fee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ff0:	69 a9       	ldd	r22, Y+49	; 0x31
     ff2:	7a a9       	ldd	r23, Y+50	; 0x32
     ff4:	8b a9       	ldd	r24, Y+51	; 0x33
     ff6:	9c a9       	ldd	r25, Y+52	; 0x34
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <HLCD_VoidInitLCD+0x8c>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	98 ab       	std	Y+48, r25	; 0x30
    100e:	8f a7       	std	Y+47, r24	; 0x2f
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <HLCD_VoidInitLCD+0x10a>
	else if (__tmp > 65535)
    1012:	69 a9       	ldd	r22, Y+49	; 0x31
    1014:	7a a9       	ldd	r23, Y+50	; 0x32
    1016:	8b a9       	ldd	r24, Y+51	; 0x33
    1018:	9c a9       	ldd	r25, Y+52	; 0x34
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <HLCD_VoidInitLCD+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6d a9       	ldd	r22, Y+53	; 0x35
    102c:	7e a9       	ldd	r23, Y+54	; 0x36
    102e:	8f a9       	ldd	r24, Y+55	; 0x37
    1030:	98 ad       	ldd	r25, Y+56	; 0x38
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	98 ab       	std	Y+48, r25	; 0x30
    1050:	8f a7       	std	Y+47, r24	; 0x2f
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <HLCD_VoidInitLCD+0xec>
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9e a7       	std	Y+46, r25	; 0x2e
    105a:	8d a7       	std	Y+45, r24	; 0x2d
    105c:	8d a5       	ldd	r24, Y+45	; 0x2d
    105e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <HLCD_VoidInitLCD+0xda>
    1064:	9e a7       	std	Y+46, r25	; 0x2e
    1066:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8f a5       	ldd	r24, Y+47	; 0x2f
    106a:	98 a9       	ldd	r25, Y+48	; 0x30
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	98 ab       	std	Y+48, r25	; 0x30
    1070:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8f a5       	ldd	r24, Y+47	; 0x2f
    1074:	98 a9       	ldd	r25, Y+48	; 0x30
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <HLCD_VoidInitLCD+0xce>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <HLCD_VoidInitLCD+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	69 a9       	ldd	r22, Y+49	; 0x31
    107e:	7a a9       	ldd	r23, Y+50	; 0x32
    1080:	8b a9       	ldd	r24, Y+51	; 0x33
    1082:	9c a9       	ldd	r25, Y+52	; 0x34
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	98 ab       	std	Y+48, r25	; 0x30
    108e:	8f a7       	std	Y+47, r24	; 0x2f
    1090:	8f a5       	ldd	r24, Y+47	; 0x2f
    1092:	98 a9       	ldd	r25, Y+48	; 0x30
    1094:	9c a7       	std	Y+44, r25	; 0x2c
    1096:	8b a7       	std	Y+43, r24	; 0x2b
    1098:	8b a5       	ldd	r24, Y+43	; 0x2b
    109a:	9c a5       	ldd	r25, Y+44	; 0x2c
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <HLCD_VoidInitLCD+0x116>
    10a0:	9c a7       	std	Y+44, r25	; 0x2c
    10a2:	8b a7       	std	Y+43, r24	; 0x2b


    _delay_ms(40);
    //function set 5x8 2lines
    HLCD_VoidCSendCommand(Function_Set_row2_5X8);
    10a4:	88 e3       	ldi	r24, 0x38	; 56
    10a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e2       	ldi	r26, 0x20	; 32
    10b0:	b2 e4       	ldi	r27, 0x42	; 66
    10b2:	8f a3       	std	Y+39, r24	; 0x27
    10b4:	98 a7       	std	Y+40, r25	; 0x28
    10b6:	a9 a7       	std	Y+41, r26	; 0x29
    10b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6f a1       	ldd	r22, Y+39	; 0x27
    10bc:	78 a5       	ldd	r23, Y+40	; 0x28
    10be:	89 a5       	ldd	r24, Y+41	; 0x29
    10c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a ef       	ldi	r20, 0xFA	; 250
    10c8:	54 e4       	ldi	r21, 0x44	; 68
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8b a3       	std	Y+35, r24	; 0x23
    10d4:	9c a3       	std	Y+36, r25	; 0x24
    10d6:	ad a3       	std	Y+37, r26	; 0x25
    10d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <HLCD_VoidInitLCD+0x176>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9a a3       	std	Y+34, r25	; 0x22
    10f8:	89 a3       	std	Y+33, r24	; 0x21
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <HLCD_VoidInitLCD+0x1f4>
	else if (__tmp > 65535)
    10fc:	6b a1       	ldd	r22, Y+35	; 0x23
    10fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1100:	8d a1       	ldd	r24, Y+37	; 0x25
    1102:	9e a1       	ldd	r25, Y+38	; 0x26
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <HLCD_VoidInitLCD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6f a1       	ldd	r22, Y+39	; 0x27
    1116:	78 a5       	ldd	r23, Y+40	; 0x28
    1118:	89 a5       	ldd	r24, Y+41	; 0x29
    111a:	9a a5       	ldd	r25, Y+42	; 0x2a
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9a a3       	std	Y+34, r25	; 0x22
    113a:	89 a3       	std	Y+33, r24	; 0x21
    113c:	0f c0       	rjmp	.+30     	; 0x115c <HLCD_VoidInitLCD+0x1d6>
    113e:	88 ec       	ldi	r24, 0xC8	; 200
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	98 a3       	std	Y+32, r25	; 0x20
    1144:	8f 8f       	std	Y+31, r24	; 0x1f
    1146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1148:	98 a1       	ldd	r25, Y+32	; 0x20
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <HLCD_VoidInitLCD+0x1c4>
    114e:	98 a3       	std	Y+32, r25	; 0x20
    1150:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	89 a1       	ldd	r24, Y+33	; 0x21
    1154:	9a a1       	ldd	r25, Y+34	; 0x22
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9a a3       	std	Y+34, r25	; 0x22
    115a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	89 a1       	ldd	r24, Y+33	; 0x21
    115e:	9a a1       	ldd	r25, Y+34	; 0x22
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <HLCD_VoidInitLCD+0x1b8>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <HLCD_VoidInitLCD+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6b a1       	ldd	r22, Y+35	; 0x23
    1168:	7c a1       	ldd	r23, Y+36	; 0x24
    116a:	8d a1       	ldd	r24, Y+37	; 0x25
    116c:	9e a1       	ldd	r25, Y+38	; 0x26
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
    117a:	89 a1       	ldd	r24, Y+33	; 0x21
    117c:	9a a1       	ldd	r25, Y+34	; 0x22
    117e:	9e 8f       	std	Y+30, r25	; 0x1e
    1180:	8d 8f       	std	Y+29, r24	; 0x1d
    1182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1184:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <HLCD_VoidInitLCD+0x200>
    118a:	9e 8f       	std	Y+30, r25	; 0x1e
    118c:	8d 8f       	std	Y+29, r24	; 0x1d
    	_delay_ms(40);

    //dispay
    HLCD_VoidCSendCommand(dispay_on_with_cursol);
    118e:	8f e0       	ldi	r24, 0x0F	; 15
    1190:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e2       	ldi	r26, 0x20	; 32
    119a:	b2 e4       	ldi	r27, 0x42	; 66
    119c:	89 8f       	std	Y+25, r24	; 0x19
    119e:	9a 8f       	std	Y+26, r25	; 0x1a
    11a0:	ab 8f       	std	Y+27, r26	; 0x1b
    11a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a4:	69 8d       	ldd	r22, Y+25	; 0x19
    11a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4a ef       	ldi	r20, 0xFA	; 250
    11b2:	54 e4       	ldi	r21, 0x44	; 68
    11b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8d 8b       	std	Y+21, r24	; 0x15
    11be:	9e 8b       	std	Y+22, r25	; 0x16
    11c0:	af 8b       	std	Y+23, r26	; 0x17
    11c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5f e3       	ldi	r21, 0x3F	; 63
    11d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d8:	88 23       	and	r24, r24
    11da:	2c f4       	brge	.+10     	; 0x11e6 <HLCD_VoidInitLCD+0x260>
		__ticks = 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
    11e2:	8b 8b       	std	Y+19, r24	; 0x13
    11e4:	3f c0       	rjmp	.+126    	; 0x1264 <HLCD_VoidInitLCD+0x2de>
	else if (__tmp > 65535)
    11e6:	6d 89       	ldd	r22, Y+21	; 0x15
    11e8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ea:	8f 89       	ldd	r24, Y+23	; 0x17
    11ec:	98 8d       	ldd	r25, Y+24	; 0x18
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	3f ef       	ldi	r19, 0xFF	; 255
    11f2:	4f e7       	ldi	r20, 0x7F	; 127
    11f4:	57 e4       	ldi	r21, 0x47	; 71
    11f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	4c f5       	brge	.+82     	; 0x1250 <HLCD_VoidInitLCD+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e2       	ldi	r20, 0x20	; 32
    120c:	51 e4       	ldi	r21, 0x41	; 65
    120e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	9c 8b       	std	Y+20, r25	; 0x14
    1224:	8b 8b       	std	Y+19, r24	; 0x13
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <HLCD_VoidInitLCD+0x2c0>
    1228:	88 ec       	ldi	r24, 0xC8	; 200
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9a 8b       	std	Y+18, r25	; 0x12
    122e:	89 8b       	std	Y+17, r24	; 0x11
    1230:	89 89       	ldd	r24, Y+17	; 0x11
    1232:	9a 89       	ldd	r25, Y+18	; 0x12
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <HLCD_VoidInitLCD+0x2ae>
    1238:	9a 8b       	std	Y+18, r25	; 0x12
    123a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	8b 89       	ldd	r24, Y+19	; 0x13
    123e:	9c 89       	ldd	r25, Y+20	; 0x14
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1246:	8b 89       	ldd	r24, Y+19	; 0x13
    1248:	9c 89       	ldd	r25, Y+20	; 0x14
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	69 f7       	brne	.-38     	; 0x1228 <HLCD_VoidInitLCD+0x2a2>
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <HLCD_VoidInitLCD+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
    1264:	8b 89       	ldd	r24, Y+19	; 0x13
    1266:	9c 89       	ldd	r25, Y+20	; 0x14
    1268:	98 8b       	std	Y+16, r25	; 0x10
    126a:	8f 87       	std	Y+15, r24	; 0x0f
    126c:	8f 85       	ldd	r24, Y+15	; 0x0f
    126e:	98 89       	ldd	r25, Y+16	; 0x10
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <HLCD_VoidInitLCD+0x2ea>
    1274:	98 8b       	std	Y+16, r25	; 0x10
    1276:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);

    //Clear display
    HLCD_VoidCSendCommand(display_clear);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a0 e2       	ldi	r26, 0x20	; 32
    1284:	b2 e4       	ldi	r27, 0x42	; 66
    1286:	8b 87       	std	Y+11, r24	; 0x0b
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	ad 87       	std	Y+13, r26	; 0x0d
    128c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8f 83       	std	Y+7, r24	; 0x07
    12a8:	98 87       	std	Y+8, r25	; 0x08
    12aa:	a9 87       	std	Y+9, r26	; 0x09
    12ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <HLCD_VoidInitLCD+0x34a>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <HLCD_VoidInitLCD+0x3c8>
	else if (__tmp > 65535)
    12d0:	6f 81       	ldd	r22, Y+7	; 0x07
    12d2:	78 85       	ldd	r23, Y+8	; 0x08
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	4c f5       	brge	.+82     	; 0x133a <HLCD_VoidInitLCD+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <HLCD_VoidInitLCD+0x3aa>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <HLCD_VoidInitLCD+0x398>
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f7       	brne	.-38     	; 0x1312 <HLCD_VoidInitLCD+0x38c>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <HLCD_VoidInitLCD+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9e 83       	std	Y+6, r25	; 0x06
    134c:	8d 83       	std	Y+5, r24	; 0x05
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <HLCD_VoidInitLCD+0x3d4>
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

}
    1362:	e8 96       	adiw	r28, 0x38	; 56
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <HLCD_VoidDisplay_String>:

void HLCD_VoidDisplay_String(const char* word,u8 A_u8rowNum,u8 A_u8colNum)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <HLCD_VoidDisplay_String+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <HLCD_VoidDisplay_String+0x8>
    137c:	00 d0       	rcall	.+0      	; 0x137e <HLCD_VoidDisplay_String+0xa>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	6d 83       	std	Y+5, r22	; 0x05
    1388:	4e 83       	std	Y+6, r20	; 0x06
    u8 local_address=equation_local_address;
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	00 24       	eor	r0, r0
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	07 94       	ror	r0
    1398:	96 95       	lsr	r25
    139a:	87 95       	ror	r24
    139c:	07 94       	ror	r0
    139e:	98 2f       	mov	r25, r24
    13a0:	80 2d       	mov	r24, r0
    13a2:	98 2f       	mov	r25, r24
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	89 0f       	add	r24, r25
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    //if after 0x15 go to row 2
    if ((local_address<0x40)&&(local_address>0x15))
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 34       	cpi	r24, 0x40	; 64
    13ae:	38 f4       	brcc	.+14     	; 0x13be <HLCD_VoidDisplay_String+0x4a>
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	86 31       	cpi	r24, 0x16	; 22
    13b4:	20 f0       	brcs	.+8      	; 0x13be <HLCD_VoidDisplay_String+0x4a>
    {
             HLCD_VoidGoto(1,0);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
    }
    //wrong location go to row1
 if ((local_address>0x67))
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 36       	cpi	r24, 0x68	; 104
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <HLCD_VoidDisplay_String+0x58>
    {
             HLCD_VoidGoto(0,0);
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
    }

    u8 counter=intial_counter;
    13cc:	19 82       	std	Y+1, r1	; 0x01
    HLCD_VoidGoto(A_u8rowNum,A_u8colNum);
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	6e 81       	ldd	r22, Y+6	; 0x06
    13d2:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>


    for (counter=intial_counter;word[counter]!='\0';counter++)
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	22 c0       	rjmp	.+68     	; 0x141e <HLCD_VoidDisplay_String+0xaa>
    {
        if (local_address==15)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	8f 30       	cpi	r24, 0x0F	; 15
    13de:	31 f4       	brne	.+12     	; 0x13ec <HLCD_VoidDisplay_String+0x78>
        {
         HLCD_VoidGoto(1,0);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
         local_address=0x40;
    13e8:	80 e4       	ldi	r24, 0x40	; 64
    13ea:	8a 83       	std	Y+2, r24	; 0x02
        }
        if (local_address==0x50)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 35       	cpi	r24, 0x50	; 80
    13f0:	29 f4       	brne	.+10     	; 0x13fc <HLCD_VoidDisplay_String+0x88>
        {
          HLCD_VoidGoto(0,0);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
          local_address=0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02

        }
        HLCD_VoidCSendData(word[counter]);
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	fc 01       	movw	r30, r24
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	80 81       	ld	r24, Z
    140e:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
        local_address++;
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	8a 83       	std	Y+2, r24	; 0x02

    u8 counter=intial_counter;
    HLCD_VoidGoto(A_u8rowNum,A_u8colNum);


    for (counter=intial_counter;word[counter]!='\0';counter++)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	fc 01       	movw	r30, r24
    142a:	e2 0f       	add	r30, r18
    142c:	f3 1f       	adc	r31, r19
    142e:	80 81       	ld	r24, Z
    1430:	88 23       	and	r24, r24
    1432:	99 f6       	brne	.-90     	; 0x13da <HLCD_VoidDisplay_String+0x66>
        HLCD_VoidCSendData(word[counter]);
        local_address++;
    }
   
    
}
    1434:	26 96       	adiw	r28, 0x06	; 6
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <HLCD_VoidGoto>:
void HLCD_VoidGoto(u8 A_u8rowNum,u8 A_u8colNum)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <HLCD_VoidGoto+0x6>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_address=equation_local_address+128;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	00 24       	eor	r0, r0
    145e:	96 95       	lsr	r25
    1460:	87 95       	ror	r24
    1462:	07 94       	ror	r0
    1464:	96 95       	lsr	r25
    1466:	87 95       	ror	r24
    1468:	07 94       	ror	r0
    146a:	98 2f       	mov	r25, r24
    146c:	80 2d       	mov	r24, r0
    146e:	98 2f       	mov	r25, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	89 0f       	add	r24, r25
    1474:	80 58       	subi	r24, 0x80	; 128
    1476:	89 83       	std	Y+1, r24	; 0x01
    HLCD_VoidCSendCommand(local_address);
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <HLCD_VoidDisplaySpecialCharacter>:
void HLCD_VoidDisplaySpecialCharacter (u8 *P_u8pattern,u8 A_u8NumOfBlock,u8 A_u8ROW_Num,u8 A_u8COLNum )
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	27 97       	sbiw	r28, 0x07	; 7
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	6d 83       	std	Y+5, r22	; 0x05
    14a4:	4e 83       	std	Y+6, r20	; 0x06
    14a6:	2f 83       	std	Y+7, r18	; 0x07
    //calculate block address
    u8 L_u8Loction_Address_In_Cgrom =block_bits*A_u8NumOfBlock;
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8location_ponter_in_block=intial_counter;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    //go to cgram
    HLCD_VoidCSendCommand(L_u8Loction_Address_In_Cgrom+set_pin6_on);
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 5c       	subi	r24, 0xC0	; 192
    14c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    //write in cgram
    for(L_u8location_ponter_in_block=intial_counter;L_u8location_ponter_in_block<block_bits;L_u8location_ponter_in_block++)
    14c6:	19 82       	std	Y+1, r1	; 0x01
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <HLCD_VoidDisplaySpecialCharacter+0x5c>
    {
          HLCD_VoidCSendData(P_u8pattern[L_u8location_ponter_in_block]);
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	fc 01       	movw	r30, r24
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    u8 L_u8Loction_Address_In_Cgrom =block_bits*A_u8NumOfBlock;
    u8 L_u8location_ponter_in_block=intial_counter;
    //go to cgram
    HLCD_VoidCSendCommand(L_u8Loction_Address_In_Cgrom+set_pin6_on);
    //write in cgram
    for(L_u8location_ponter_in_block=intial_counter;L_u8location_ponter_in_block<block_bits;L_u8location_ponter_in_block++)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	78 f3       	brcs	.-34     	; 0x14ca <HLCD_VoidDisplaySpecialCharacter+0x40>
    {
          HLCD_VoidCSendData(P_u8pattern[L_u8location_ponter_in_block]);
    }
    //go to ddram
    HLCD_VoidGoto(A_u8ROW_Num,A_u8COLNum);
    14ec:	8e 81       	ldd	r24, Y+6	; 0x06
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
    //write in ddram number block to access cgram
    HLCD_VoidCSendData(A_u8NumOfBlock);
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>



}
    14fa:	27 96       	adiw	r28, 0x07	; 7
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <DisplayVariable>:
void DisplayVariable (u16 A_u16var)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	28 97       	sbiw	r28, 0x08	; 8
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    u8 *array_of_character;
    s8 counter=intial_counter;
    1524:	1a 82       	std	Y+2, r1	; 0x02
    u8 counter_element=intial_counter;
    1526:	19 82       	std	Y+1, r1	; 0x01
    array_of_character=(u8*)malloc(8*sizeof(A_u16var));
    1528:	80 e1       	ldi	r24, 0x10	; 16
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 03 19 	call	0x3206	; 0x3206 <malloc>
    1530:	9c 83       	std	Y+4, r25	; 0x04
    1532:	8b 83       	std	Y+3, r24	; 0x03
    if (A_u16var==0)
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	09 f5       	brne	.+66     	; 0x157e <DisplayVariable+0x72>
    {
        HLCD_VoidCSendData('0');
    153c:	80 e3       	ldi	r24, 0x30	; 48
    153e:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    1542:	1d c0       	rjmp	.+58     	; 0x157e <DisplayVariable+0x72>
    }
    while (A_u16var!=0)
    {
        array_of_character[counter_element]=(A_u16var%10);
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	fc 01       	movw	r30, r24
    1550:	e2 0f       	add	r30, r18
    1552:	f3 1f       	adc	r31, r19
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	2a e0       	ldi	r18, 0x0A	; 10
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 a5 18 	call	0x314a	; 0x314a <__udivmodhi4>
    1562:	80 83       	st	Z, r24
        A_u16var=A_u16var/10;
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	2a e0       	ldi	r18, 0x0A	; 10
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	b9 01       	movw	r22, r18
    156e:	0e 94 a5 18 	call	0x314a	; 0x314a <__udivmodhi4>
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
        counter_element++;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	89 83       	std	Y+1, r24	; 0x01
    array_of_character=(u8*)malloc(8*sizeof(A_u16var));
    if (A_u16var==0)
    {
        HLCD_VoidCSendData('0');
    }
    while (A_u16var!=0)
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	f9 f6       	brne	.-66     	; 0x1544 <DisplayVariable+0x38>
        array_of_character[counter_element]=(A_u16var%10);
        A_u16var=A_u16var/10;
        counter_element++;
    }
    
    for(counter=(counter_element-1);counter>=intial_counter;counter--)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	81 50       	subi	r24, 0x01	; 1
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	7e c0       	rjmp	.+252    	; 0x168a <DisplayVariable+0x17e>
    {
        switch(array_of_character[counter])
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	33 27       	eor	r19, r19
    1594:	27 fd       	sbrc	r18, 7
    1596:	30 95       	com	r19
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	fc 01       	movw	r30, r24
    159e:	e2 0f       	add	r30, r18
    15a0:	f3 1f       	adc	r31, r19
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	38 87       	std	Y+8, r19	; 0x08
    15aa:	2f 83       	std	Y+7, r18	; 0x07
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <DisplayVariable+0xac>
    15b6:	4f c0       	rjmp	.+158    	; 0x1656 <DisplayVariable+0x14a>
    15b8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ba:	38 85       	ldd	r19, Y+8	; 0x08
    15bc:	25 30       	cpi	r18, 0x05	; 5
    15be:	31 05       	cpc	r19, r1
    15c0:	d4 f4       	brge	.+52     	; 0x15f6 <DisplayVariable+0xea>
    15c2:	8f 81       	ldd	r24, Y+7	; 0x07
    15c4:	98 85       	ldd	r25, Y+8	; 0x08
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	c9 f1       	breq	.+114    	; 0x163e <DisplayVariable+0x132>
    15cc:	2f 81       	ldd	r18, Y+7	; 0x07
    15ce:	38 85       	ldd	r19, Y+8	; 0x08
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <DisplayVariable+0xd4>
    15d6:	8f 81       	ldd	r24, Y+7	; 0x07
    15d8:	98 85       	ldd	r25, Y+8	; 0x08
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	61 f1       	breq	.+88     	; 0x1636 <DisplayVariable+0x12a>
    15de:	52 c0       	rjmp	.+164    	; 0x1684 <DisplayVariable+0x178>
    15e0:	2f 81       	ldd	r18, Y+7	; 0x07
    15e2:	38 85       	ldd	r19, Y+8	; 0x08
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	71 f1       	breq	.+92     	; 0x1646 <DisplayVariable+0x13a>
    15ea:	8f 81       	ldd	r24, Y+7	; 0x07
    15ec:	98 85       	ldd	r25, Y+8	; 0x08
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	69 f1       	breq	.+90     	; 0x164e <DisplayVariable+0x142>
    15f4:	47 c0       	rjmp	.+142    	; 0x1684 <DisplayVariable+0x178>
    15f6:	2f 81       	ldd	r18, Y+7	; 0x07
    15f8:	38 85       	ldd	r19, Y+8	; 0x08
    15fa:	27 30       	cpi	r18, 0x07	; 7
    15fc:	31 05       	cpc	r19, r1
    15fe:	b9 f1       	breq	.+110    	; 0x166e <DisplayVariable+0x162>
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
    1602:	98 85       	ldd	r25, Y+8	; 0x08
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	91 05       	cpc	r25, r1
    1608:	5c f4       	brge	.+22     	; 0x1620 <DisplayVariable+0x114>
    160a:	2f 81       	ldd	r18, Y+7	; 0x07
    160c:	38 85       	ldd	r19, Y+8	; 0x08
    160e:	25 30       	cpi	r18, 0x05	; 5
    1610:	31 05       	cpc	r19, r1
    1612:	29 f1       	breq	.+74     	; 0x165e <DisplayVariable+0x152>
    1614:	8f 81       	ldd	r24, Y+7	; 0x07
    1616:	98 85       	ldd	r25, Y+8	; 0x08
    1618:	86 30       	cpi	r24, 0x06	; 6
    161a:	91 05       	cpc	r25, r1
    161c:	21 f1       	breq	.+72     	; 0x1666 <DisplayVariable+0x15a>
    161e:	32 c0       	rjmp	.+100    	; 0x1684 <DisplayVariable+0x178>
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	38 85       	ldd	r19, Y+8	; 0x08
    1624:	28 30       	cpi	r18, 0x08	; 8
    1626:	31 05       	cpc	r19, r1
    1628:	31 f1       	breq	.+76     	; 0x1676 <DisplayVariable+0x16a>
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	98 85       	ldd	r25, Y+8	; 0x08
    162e:	89 30       	cpi	r24, 0x09	; 9
    1630:	91 05       	cpc	r25, r1
    1632:	29 f1       	breq	.+74     	; 0x167e <DisplayVariable+0x172>
    1634:	27 c0       	rjmp	.+78     	; 0x1684 <DisplayVariable+0x178>
    {
        case num0 :  HLCD_VoidCSendData('0');break;
    1636:	80 e3       	ldi	r24, 0x30	; 48
    1638:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    163c:	23 c0       	rjmp	.+70     	; 0x1684 <DisplayVariable+0x178>
        case num1 :  HLCD_VoidCSendData('1');break;
    163e:	81 e3       	ldi	r24, 0x31	; 49
    1640:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    1644:	1f c0       	rjmp	.+62     	; 0x1684 <DisplayVariable+0x178>
        case num2 :  HLCD_VoidCSendData('2');break;
    1646:	82 e3       	ldi	r24, 0x32	; 50
    1648:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    164c:	1b c0       	rjmp	.+54     	; 0x1684 <DisplayVariable+0x178>
        case num3 :  HLCD_VoidCSendData('3');break;
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <DisplayVariable+0x178>
        case num4 :  HLCD_VoidCSendData('4');break;
    1656:	84 e3       	ldi	r24, 0x34	; 52
    1658:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <DisplayVariable+0x178>
        case num5 :  HLCD_VoidCSendData('5');break;
    165e:	85 e3       	ldi	r24, 0x35	; 53
    1660:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <DisplayVariable+0x178>
        case num6 :  HLCD_VoidCSendData('6');break;
    1666:	86 e3       	ldi	r24, 0x36	; 54
    1668:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    166c:	0b c0       	rjmp	.+22     	; 0x1684 <DisplayVariable+0x178>
        case num7 :  HLCD_VoidCSendData('7');break;
    166e:	87 e3       	ldi	r24, 0x37	; 55
    1670:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <DisplayVariable+0x178>
        case num8 :  HLCD_VoidCSendData('8');break;
    1676:	88 e3       	ldi	r24, 0x38	; 56
    1678:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <DisplayVariable+0x178>
        case num9 :  HLCD_VoidCSendData('9');break;
    167e:	89 e3       	ldi	r24, 0x39	; 57
    1680:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
        array_of_character[counter_element]=(A_u16var%10);
        A_u16var=A_u16var/10;
        counter_element++;
    }
    
    for(counter=(counter_element-1);counter>=intial_counter;counter--)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	81 50       	subi	r24, 0x01	; 1
    1688:	8a 83       	std	Y+2, r24	; 0x02
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	88 23       	and	r24, r24
    168e:	0c f0       	brlt	.+2      	; 0x1692 <DisplayVariable+0x186>
    1690:	7e cf       	rjmp	.-260    	; 0x158e <DisplayVariable+0x82>


    }
    }

}
    1692:	28 96       	adiw	r28, 0x08	; 8
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <HLCD_VoidKpdDisplay>:
void HLCD_VoidKpdDisplay(u8 A_key_pressed,char *display_character)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	63 97       	sbiw	r28, 0x13	; 19
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
    16ba:	79 8b       	std	Y+17, r23	; 0x11
    16bc:	68 8b       	std	Y+16, r22	; 0x10

switch(A_key_pressed)
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3b 8b       	std	Y+19, r19	; 0x13
    16c6:	2a 8b       	std	Y+18, r18	; 0x12
    16c8:	8a 89       	ldd	r24, Y+18	; 0x12
    16ca:	9b 89       	ldd	r25, Y+19	; 0x13
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <HLCD_VoidKpdDisplay+0x30>
    16d2:	0b c1       	rjmp	.+534    	; 0x18ea <HLCD_VoidKpdDisplay+0x246>
    16d4:	2a 89       	ldd	r18, Y+18	; 0x12
    16d6:	3b 89       	ldd	r19, Y+19	; 0x13
    16d8:	29 30       	cpi	r18, 0x09	; 9
    16da:	31 05       	cpc	r19, r1
    16dc:	5c f5       	brge	.+86     	; 0x1734 <HLCD_VoidKpdDisplay+0x90>
    16de:	8a 89       	ldd	r24, Y+18	; 0x12
    16e0:	9b 89       	ldd	r25, Y+19	; 0x13
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <HLCD_VoidKpdDisplay+0x46>
    16e8:	6e c0       	rjmp	.+220    	; 0x17c6 <HLCD_VoidKpdDisplay+0x122>
    16ea:	2a 89       	ldd	r18, Y+18	; 0x12
    16ec:	3b 89       	ldd	r19, Y+19	; 0x13
    16ee:	25 30       	cpi	r18, 0x05	; 5
    16f0:	31 05       	cpc	r19, r1
    16f2:	9c f4       	brge	.+38     	; 0x171a <HLCD_VoidKpdDisplay+0x76>
    16f4:	8a 89       	ldd	r24, Y+18	; 0x12
    16f6:	9b 89       	ldd	r25, Y+19	; 0x13
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <HLCD_VoidKpdDisplay+0x5c>
    16fe:	53 c0       	rjmp	.+166    	; 0x17a6 <HLCD_VoidKpdDisplay+0x102>
    1700:	2a 89       	ldd	r18, Y+18	; 0x12
    1702:	3b 89       	ldd	r19, Y+19	; 0x13
    1704:	23 30       	cpi	r18, 0x03	; 3
    1706:	31 05       	cpc	r19, r1
    1708:	0c f0       	brlt	.+2      	; 0x170c <HLCD_VoidKpdDisplay+0x68>
    170a:	55 c0       	rjmp	.+170    	; 0x17b6 <HLCD_VoidKpdDisplay+0x112>
    170c:	8a 89       	ldd	r24, Y+18	; 0x12
    170e:	9b 89       	ldd	r25, Y+19	; 0x13
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <HLCD_VoidKpdDisplay+0x74>
    1716:	3f c0       	rjmp	.+126    	; 0x1796 <HLCD_VoidKpdDisplay+0xf2>
    1718:	2e c1       	rjmp	.+604    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
    171a:	2a 89       	ldd	r18, Y+18	; 0x12
    171c:	3b 89       	ldd	r19, Y+19	; 0x13
    171e:	26 30       	cpi	r18, 0x06	; 6
    1720:	31 05       	cpc	r19, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <HLCD_VoidKpdDisplay+0x82>
    1724:	d2 c0       	rjmp	.+420    	; 0x18ca <HLCD_VoidKpdDisplay+0x226>
    1726:	8a 89       	ldd	r24, Y+18	; 0x12
    1728:	9b 89       	ldd	r25, Y+19	; 0x13
    172a:	87 30       	cpi	r24, 0x07	; 7
    172c:	91 05       	cpc	r25, r1
    172e:	0c f0       	brlt	.+2      	; 0x1732 <HLCD_VoidKpdDisplay+0x8e>
    1730:	d4 c0       	rjmp	.+424    	; 0x18da <HLCD_VoidKpdDisplay+0x236>
    1732:	c3 c0       	rjmp	.+390    	; 0x18ba <HLCD_VoidKpdDisplay+0x216>
    1734:	2a 89       	ldd	r18, Y+18	; 0x12
    1736:	3b 89       	ldd	r19, Y+19	; 0x13
    1738:	2c 30       	cpi	r18, 0x0C	; 12
    173a:	31 05       	cpc	r19, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <HLCD_VoidKpdDisplay+0x9c>
    173e:	f4 c0       	rjmp	.+488    	; 0x1928 <HLCD_VoidKpdDisplay+0x284>
    1740:	8a 89       	ldd	r24, Y+18	; 0x12
    1742:	9b 89       	ldd	r25, Y+19	; 0x13
    1744:	8d 30       	cpi	r24, 0x0D	; 13
    1746:	91 05       	cpc	r25, r1
    1748:	6c f4       	brge	.+26     	; 0x1764 <HLCD_VoidKpdDisplay+0xc0>
    174a:	2a 89       	ldd	r18, Y+18	; 0x12
    174c:	3b 89       	ldd	r19, Y+19	; 0x13
    174e:	2a 30       	cpi	r18, 0x0A	; 10
    1750:	31 05       	cpc	r19, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <HLCD_VoidKpdDisplay+0xb2>
    1754:	d9 c0       	rjmp	.+434    	; 0x1908 <HLCD_VoidKpdDisplay+0x264>
    1756:	8a 89       	ldd	r24, Y+18	; 0x12
    1758:	9b 89       	ldd	r25, Y+19	; 0x13
    175a:	8b 30       	cpi	r24, 0x0B	; 11
    175c:	91 05       	cpc	r25, r1
    175e:	0c f0       	brlt	.+2      	; 0x1762 <HLCD_VoidKpdDisplay+0xbe>
    1760:	db c0       	rjmp	.+438    	; 0x1918 <HLCD_VoidKpdDisplay+0x274>
    1762:	ca c0       	rjmp	.+404    	; 0x18f8 <HLCD_VoidKpdDisplay+0x254>
    1764:	2a 89       	ldd	r18, Y+18	; 0x12
    1766:	3b 89       	ldd	r19, Y+19	; 0x13
    1768:	2e 30       	cpi	r18, 0x0E	; 14
    176a:	31 05       	cpc	r19, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <HLCD_VoidKpdDisplay+0xcc>
    176e:	ec c0       	rjmp	.+472    	; 0x1948 <HLCD_VoidKpdDisplay+0x2a4>
    1770:	8a 89       	ldd	r24, Y+18	; 0x12
    1772:	9b 89       	ldd	r25, Y+19	; 0x13
    1774:	8e 30       	cpi	r24, 0x0E	; 14
    1776:	91 05       	cpc	r25, r1
    1778:	0c f4       	brge	.+2      	; 0x177c <HLCD_VoidKpdDisplay+0xd8>
    177a:	de c0       	rjmp	.+444    	; 0x1938 <HLCD_VoidKpdDisplay+0x294>
    177c:	2a 89       	ldd	r18, Y+18	; 0x12
    177e:	3b 89       	ldd	r19, Y+19	; 0x13
    1780:	2f 30       	cpi	r18, 0x0F	; 15
    1782:	31 05       	cpc	r19, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <HLCD_VoidKpdDisplay+0xe4>
    1786:	e8 c0       	rjmp	.+464    	; 0x1958 <HLCD_VoidKpdDisplay+0x2b4>
    1788:	8a 89       	ldd	r24, Y+18	; 0x12
    178a:	9b 89       	ldd	r25, Y+19	; 0x13
    178c:	80 31       	cpi	r24, 0x10	; 16
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <HLCD_VoidKpdDisplay+0xf0>
    1792:	ea c0       	rjmp	.+468    	; 0x1968 <HLCD_VoidKpdDisplay+0x2c4>
    1794:	f0 c0       	rjmp	.+480    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
{
 case key1 : HLCD_VoidCSendData('7'); *display_character=7; break; 
    1796:	87 e3       	ldi	r24, 0x37	; 55
    1798:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    179c:	e8 89       	ldd	r30, Y+16	; 0x10
    179e:	f9 89       	ldd	r31, Y+17	; 0x11
    17a0:	87 e0       	ldi	r24, 0x07	; 7
    17a2:	80 83       	st	Z, r24
    17a4:	e8 c0       	rjmp	.+464    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key2 : HLCD_VoidCSendData('4'); *display_character=4; break; 
    17a6:	84 e3       	ldi	r24, 0x34	; 52
    17a8:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    17ac:	e8 89       	ldd	r30, Y+16	; 0x10
    17ae:	f9 89       	ldd	r31, Y+17	; 0x11
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	80 83       	st	Z, r24
    17b4:	e0 c0       	rjmp	.+448    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key3 : HLCD_VoidCSendData('1'); *display_character=1; break; 
    17b6:	81 e3       	ldi	r24, 0x31	; 49
    17b8:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    17bc:	e8 89       	ldd	r30, Y+16	; 0x10
    17be:	f9 89       	ldd	r31, Y+17	; 0x11
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 83       	st	Z, r24
    17c4:	d8 c0       	rjmp	.+432    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key4 :  HLCD_VoidCSendCommand(display_clear); _delay_ms(40); HLCD_VoidGoto(row1,col1); break; 
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e2       	ldi	r26, 0x20	; 32
    17d2:	b2 e4       	ldi	r27, 0x42	; 66
    17d4:	8b 87       	std	Y+11, r24	; 0x0b
    17d6:	9c 87       	std	Y+12, r25	; 0x0c
    17d8:	ad 87       	std	Y+13, r26	; 0x0d
    17da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8f 83       	std	Y+7, r24	; 0x07
    17f6:	98 87       	std	Y+8, r25	; 0x08
    17f8:	a9 87       	std	Y+9, r26	; 0x09
    17fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <HLCD_VoidKpdDisplay+0x17a>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	3f c0       	rjmp	.+126    	; 0x189c <HLCD_VoidKpdDisplay+0x1f8>
	else if (__tmp > 65535)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <HLCD_VoidKpdDisplay+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	6b 85       	ldd	r22, Y+11	; 0x0b
    1838:	7c 85       	ldd	r23, Y+12	; 0x0c
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	0f c0       	rjmp	.+30     	; 0x187e <HLCD_VoidKpdDisplay+0x1da>
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <HLCD_VoidKpdDisplay+0x1c8>
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <HLCD_VoidKpdDisplay+0x1bc>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <HLCD_VoidKpdDisplay+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <HLCD_VoidKpdDisplay+0x204>
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
    18b8:	5e c0       	rjmp	.+188    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key5 : HLCD_VoidCSendData('8'); *display_character=8; break; 
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    18c0:	e8 89       	ldd	r30, Y+16	; 0x10
    18c2:	f9 89       	ldd	r31, Y+17	; 0x11
    18c4:	88 e0       	ldi	r24, 0x08	; 8
    18c6:	80 83       	st	Z, r24
    18c8:	56 c0       	rjmp	.+172    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key6 : HLCD_VoidCSendData('5'); *display_character=5; break; 
    18ca:	85 e3       	ldi	r24, 0x35	; 53
    18cc:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    18d0:	e8 89       	ldd	r30, Y+16	; 0x10
    18d2:	f9 89       	ldd	r31, Y+17	; 0x11
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	80 83       	st	Z, r24
    18d8:	4e c0       	rjmp	.+156    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key7 : HLCD_VoidCSendData('2'); *display_character=2; break; 
    18da:	82 e3       	ldi	r24, 0x32	; 50
    18dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    18e0:	e8 89       	ldd	r30, Y+16	; 0x10
    18e2:	f9 89       	ldd	r31, Y+17	; 0x11
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	80 83       	st	Z, r24
    18e8:	46 c0       	rjmp	.+140    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key8 : HLCD_VoidCSendData('0'); *display_character=0; break; 
    18ea:	80 e3       	ldi	r24, 0x30	; 48
    18ec:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    18f0:	e8 89       	ldd	r30, Y+16	; 0x10
    18f2:	f9 89       	ldd	r31, Y+17	; 0x11
    18f4:	10 82       	st	Z, r1
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key9 : HLCD_VoidCSendData('9'); *display_character=9; break; 
    18f8:	89 e3       	ldi	r24, 0x39	; 57
    18fa:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    18fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1900:	f9 89       	ldd	r31, Y+17	; 0x11
    1902:	89 e0       	ldi	r24, 0x09	; 9
    1904:	80 83       	st	Z, r24
    1906:	37 c0       	rjmp	.+110    	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key10: HLCD_VoidCSendData('6'); *display_character=6; break; 
    1908:	86 e3       	ldi	r24, 0x36	; 54
    190a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    190e:	e8 89       	ldd	r30, Y+16	; 0x10
    1910:	f9 89       	ldd	r31, Y+17	; 0x11
    1912:	86 e0       	ldi	r24, 0x06	; 6
    1914:	80 83       	st	Z, r24
    1916:	2f c0       	rjmp	.+94     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key11: HLCD_VoidCSendData('3'); *display_character=3; break; 
    1918:	83 e3       	ldi	r24, 0x33	; 51
    191a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    191e:	e8 89       	ldd	r30, Y+16	; 0x10
    1920:	f9 89       	ldd	r31, Y+17	; 0x11
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	80 83       	st	Z, r24
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key12: HLCD_VoidCSendData('='); *display_character='=';break; 
    1928:	8d e3       	ldi	r24, 0x3D	; 61
    192a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    192e:	e8 89       	ldd	r30, Y+16	; 0x10
    1930:	f9 89       	ldd	r31, Y+17	; 0x11
    1932:	8d e3       	ldi	r24, 0x3D	; 61
    1934:	80 83       	st	Z, r24
    1936:	1f c0       	rjmp	.+62     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key13: HLCD_VoidCSendData('/'); *display_character='/'; break; 
    1938:	8f e2       	ldi	r24, 0x2F	; 47
    193a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    193e:	e8 89       	ldd	r30, Y+16	; 0x10
    1940:	f9 89       	ldd	r31, Y+17	; 0x11
    1942:	8f e2       	ldi	r24, 0x2F	; 47
    1944:	80 83       	st	Z, r24
    1946:	17 c0       	rjmp	.+46     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key14: HLCD_VoidCSendData('*'); *display_character='*'; break; 
    1948:	8a e2       	ldi	r24, 0x2A	; 42
    194a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    194e:	e8 89       	ldd	r30, Y+16	; 0x10
    1950:	f9 89       	ldd	r31, Y+17	; 0x11
    1952:	8a e2       	ldi	r24, 0x2A	; 42
    1954:	80 83       	st	Z, r24
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key15: HLCD_VoidCSendData('-'); *display_character='-'; break; 
    1958:	8d e2       	ldi	r24, 0x2D	; 45
    195a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    195e:	e8 89       	ldd	r30, Y+16	; 0x10
    1960:	f9 89       	ldd	r31, Y+17	; 0x11
    1962:	8d e2       	ldi	r24, 0x2D	; 45
    1964:	80 83       	st	Z, r24
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <HLCD_VoidKpdDisplay+0x2d2>
 case key16: HLCD_VoidCSendData('+'); *display_character='+'; break;  
    1968:	8b e2       	ldi	r24, 0x2B	; 43
    196a:	0e 94 b3 06 	call	0xd66	; 0xd66 <HLCD_VoidCSendData>
    196e:	e8 89       	ldd	r30, Y+16	; 0x10
    1970:	f9 89       	ldd	r31, Y+17	; 0x11
    1972:	8b e2       	ldi	r24, 0x2B	; 43
    1974:	80 83       	st	Z, r24

}
}
    1976:	63 96       	adiw	r28, 0x13	; 19
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <Hlcd_Voidcalc>:
//calculate func 
void Hlcd_Voidcalc(char* contor,u8 num_character)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	61 97       	sbiw	r28, 0x11	; 17
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	98 8b       	std	Y+16, r25	; 0x10
    199e:	8f 87       	std	Y+15, r24	; 0x0f
    19a0:	69 8b       	std	Y+17, r22	; 0x11
    u8 frist_operant=0;
    19a2:	1e 86       	std	Y+14, r1	; 0x0e
    u8 second_operant=0;
    19a4:	1d 86       	std	Y+13, r1	; 0x0d
    u8 result=0;
    19a6:	1c 86       	std	Y+12, r1	; 0x0c
    u8 counter=0;
    19a8:	1b 86       	std	Y+11, r1	; 0x0b
    for (counter=0;counter<(num_character-1);counter++)
    19aa:	1b 86       	std	Y+11, r1	; 0x0b
    19ac:	18 c6       	rjmp	.+3120   	; 0x25de <Hlcd_Voidcalc+0xc56>
{
    if (contor[counter]=='+')
    19ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	98 89       	ldd	r25, Y+16	; 0x10
    19b8:	fc 01       	movw	r30, r24
    19ba:	e2 0f       	add	r30, r18
    19bc:	f3 1f       	adc	r31, r19
    19be:	80 81       	ld	r24, Z
    19c0:	8b 32       	cpi	r24, 0x2B	; 43
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <Hlcd_Voidcalc+0x3e>
    19c4:	6b c1       	rjmp	.+726    	; 0x1c9c <Hlcd_Voidcalc+0x314>
    {
        second_operant=intial_counter;
    19c6:	1d 86       	std	Y+13, r1	; 0x0d
        frist_operant=result;
    19c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ca:	8e 87       	std	Y+14, r24	; 0x0e
        u8 flag_mlti_division=intial_counter;
    19cc:	1a 86       	std	Y+10, r1	; 0x0a
    19ce:	52 c1       	rjmp	.+676    	; 0x1c74 <Hlcd_Voidcalc+0x2ec>
    
    
        while(counter<(num_character-2))
        {
            if(contor[counter+1]=='+')
    19d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9c 01       	movw	r18, r24
    19d8:	2f 5f       	subi	r18, 0xFF	; 255
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	98 89       	ldd	r25, Y+16	; 0x10
    19e0:	fc 01       	movw	r30, r24
    19e2:	e2 0f       	add	r30, r18
    19e4:	f3 1f       	adc	r31, r19
    19e6:	80 81       	ld	r24, Z
    19e8:	8b 32       	cpi	r24, 0x2B	; 43
    19ea:	59 f4       	brne	.+22     	; 0x1a02 <Hlcd_Voidcalc+0x7a>
            {

                result=second_operant+frist_operant;
    19ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f0:	89 0f       	add	r24, r25
    19f2:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    19f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f6:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=intial_counter;
    19f8:	1d 86       	std	Y+13, r1	; 0x0d
                counter++;
    19fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	8b 87       	std	Y+11, r24	; 0x0b
    1a00:	39 c1       	rjmp	.+626    	; 0x1c74 <Hlcd_Voidcalc+0x2ec>


            }
            else if(contor[counter+1]=='-')
    1a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c 01       	movw	r18, r24
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a10:	98 89       	ldd	r25, Y+16	; 0x10
    1a12:	fc 01       	movw	r30, r24
    1a14:	e2 0f       	add	r30, r18
    1a16:	f3 1f       	adc	r31, r19
    1a18:	80 81       	ld	r24, Z
    1a1a:	8d 32       	cpi	r24, 0x2D	; 45
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <Hlcd_Voidcalc+0x98>
    1a1e:	35 c1       	rjmp	.+618    	; 0x1c8a <Hlcd_Voidcalc+0x302>
               
                break;


            }
            else if (contor[counter+1]=='*')
    1a20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9c 01       	movw	r18, r24
    1a28:	2f 5f       	subi	r18, 0xFF	; 255
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2e:	98 89       	ldd	r25, Y+16	; 0x10
    1a30:	fc 01       	movw	r30, r24
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	80 81       	ld	r24, Z
    1a38:	8a 32       	cpi	r24, 0x2A	; 42
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <Hlcd_Voidcalc+0xb6>
    1a3c:	76 c0       	rjmp	.+236    	; 0x1b2a <Hlcd_Voidcalc+0x1a2>
            {
                u8 third_operant=intial_counter;
    1a3e:	19 86       	std	Y+9, r1	; 0x09
                counter++;
    1a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	8b 87       	std	Y+11, r24	; 0x0b
                flag_mlti_division=1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	8a 87       	std	Y+10, r24	; 0x0a
    1a4a:	1f c0       	rjmp	.+62     	; 0x1a8a <Hlcd_Voidcalc+0x102>
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9c 01       	movw	r18, r24
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	c9 01       	movw	r24, r18
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	82 0f       	add	r24, r18
    1a64:	93 1f       	adc	r25, r19
    1a66:	48 2f       	mov	r20, r24
    1a68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 01       	movw	r18, r24
    1a70:	2f 5f       	subi	r18, 0xFF	; 255
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	98 89       	ldd	r25, Y+16	; 0x10
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e2 0f       	add	r30, r18
    1a7c:	f3 1f       	adc	r31, r19
    1a7e:	80 81       	ld	r24, Z
    1a80:	84 0f       	add	r24, r20
    1a82:	89 87       	std	Y+9, r24	; 0x09
                      counter++;
    1a84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='*')
            {
                u8 third_operant=intial_counter;
                counter++;
                flag_mlti_division=1;
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    1a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 01       	movw	r18, r24
    1a92:	2f 5f       	subi	r18, 0xFF	; 255
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a98:	98 89       	ldd	r25, Y+16	; 0x10
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f3 1f       	adc	r31, r19
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8a 32       	cpi	r24, 0x2A	; 42
    1aa4:	c9 f1       	breq	.+114    	; 0x1b18 <Hlcd_Voidcalc+0x190>
    1aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 01       	movw	r18, r24
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab4:	98 89       	ldd	r25, Y+16	; 0x10
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	e2 0f       	add	r30, r18
    1aba:	f3 1f       	adc	r31, r19
    1abc:	80 81       	ld	r24, Z
    1abe:	8b 32       	cpi	r24, 0x2B	; 43
    1ac0:	59 f1       	breq	.+86     	; 0x1b18 <Hlcd_Voidcalc+0x190>
    1ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9c 01       	movw	r18, r24
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad0:	98 89       	ldd	r25, Y+16	; 0x10
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e2 0f       	add	r30, r18
    1ad6:	f3 1f       	adc	r31, r19
    1ad8:	80 81       	ld	r24, Z
    1ada:	8d 32       	cpi	r24, 0x2D	; 45
    1adc:	e9 f0       	breq	.+58     	; 0x1b18 <Hlcd_Voidcalc+0x190>
    1ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	98 89       	ldd	r25, Y+16	; 0x10
    1aee:	fc 01       	movw	r30, r24
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 32       	cpi	r24, 0x2F	; 47
    1af8:	79 f0       	breq	.+30     	; 0x1b18 <Hlcd_Voidcalc+0x190>
    1afa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 01       	movw	r18, r24
    1b02:	2f 5f       	subi	r18, 0xFF	; 255
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 89       	ldd	r25, Y+16	; 0x10
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e2 0f       	add	r30, r18
    1b0e:	f3 1f       	adc	r31, r19
    1b10:	80 81       	ld	r24, Z
    1b12:	8d 33       	cpi	r24, 0x3D	; 61
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <Hlcd_Voidcalc+0x190>
    1b16:	9a cf       	rjmp	.-204    	; 0x1a4c <Hlcd_Voidcalc+0xc4>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=third_operant*second_operant+frist_operant;
    1b18:	99 85       	ldd	r25, Y+9	; 0x09
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1c:	98 9f       	mul	r25, r24
    1b1e:	90 2d       	mov	r25, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b24:	89 0f       	add	r24, r25
    1b26:	8c 87       	std	Y+12, r24	; 0x0c
    1b28:	b0 c0       	rjmp	.+352    	; 0x1c8a <Hlcd_Voidcalc+0x302>
               

                break;
            }
            else if (contor[counter+1]=='/')
    1b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 01       	movw	r18, r24
    1b32:	2f 5f       	subi	r18, 0xFF	; 255
    1b34:	3f 4f       	sbci	r19, 0xFF	; 255
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	98 89       	ldd	r25, Y+16	; 0x10
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 32       	cpi	r24, 0x2F	; 47
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <Hlcd_Voidcalc+0x1c0>
    1b46:	77 c0       	rjmp	.+238    	; 0x1c36 <Hlcd_Voidcalc+0x2ae>
            {
                u8 third_operant=intial_counter;
    1b48:	18 86       	std	Y+8, r1	; 0x08
                counter++;
    1b4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	8b 87       	std	Y+11, r24	; 0x0b
                flag_mlti_division=1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	8a 87       	std	Y+10, r24	; 0x0a
    1b54:	1f c0       	rjmp	.+62     	; 0x1b94 <Hlcd_Voidcalc+0x20c>
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    1b56:	88 85       	ldd	r24, Y+8	; 0x08
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 01       	movw	r18, r24
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	c9 01       	movw	r24, r18
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	48 2f       	mov	r20, r24
    1b72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9c 01       	movw	r18, r24
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b80:	98 89       	ldd	r25, Y+16	; 0x10
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	80 81       	ld	r24, Z
    1b8a:	84 0f       	add	r24, r20
    1b8c:	88 87       	std	Y+8, r24	; 0x08
                      counter++;
    1b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b90:	8f 5f       	subi	r24, 0xFF	; 255
    1b92:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='/')
            {
                u8 third_operant=intial_counter;
                counter++;
                flag_mlti_division=1;
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    1b94:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba2:	98 89       	ldd	r25, Y+16	; 0x10
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	e2 0f       	add	r30, r18
    1ba8:	f3 1f       	adc	r31, r19
    1baa:	80 81       	ld	r24, Z
    1bac:	8a 32       	cpi	r24, 0x2A	; 42
    1bae:	c9 f1       	breq	.+114    	; 0x1c22 <Hlcd_Voidcalc+0x29a>
    1bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	2f 5f       	subi	r18, 0xFF	; 255
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8b 32       	cpi	r24, 0x2B	; 43
    1bca:	59 f1       	breq	.+86     	; 0x1c22 <Hlcd_Voidcalc+0x29a>
    1bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	2f 5f       	subi	r18, 0xFF	; 255
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bda:	98 89       	ldd	r25, Y+16	; 0x10
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	8d 32       	cpi	r24, 0x2D	; 45
    1be6:	e9 f0       	breq	.+58     	; 0x1c22 <Hlcd_Voidcalc+0x29a>
    1be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9c 01       	movw	r18, r24
    1bf0:	2f 5f       	subi	r18, 0xFF	; 255
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf6:	98 89       	ldd	r25, Y+16	; 0x10
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	e2 0f       	add	r30, r18
    1bfc:	f3 1f       	adc	r31, r19
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 32       	cpi	r24, 0x2F	; 47
    1c02:	79 f0       	breq	.+30     	; 0x1c22 <Hlcd_Voidcalc+0x29a>
    1c04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	2f 5f       	subi	r18, 0xFF	; 255
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	98 89       	ldd	r25, Y+16	; 0x10
    1c14:	fc 01       	movw	r30, r24
    1c16:	e2 0f       	add	r30, r18
    1c18:	f3 1f       	adc	r31, r19
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8d 33       	cpi	r24, 0x3D	; 61
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <Hlcd_Voidcalc+0x29a>
    1c20:	9a cf       	rjmp	.-204    	; 0x1b56 <Hlcd_Voidcalc+0x1ce>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=second_operant/third_operant+frist_operant;
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	98 85       	ldd	r25, Y+8	; 0x08
    1c26:	69 2f       	mov	r22, r25
    1c28:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c30:	89 0f       	add	r24, r25
    1c32:	8c 87       	std	Y+12, r24	; 0x0c
    1c34:	2a c0       	rjmp	.+84     	; 0x1c8a <Hlcd_Voidcalc+0x302>
                break;
            }
            
            
            else {
            second_operant=second_operant*10+contor[counter+1];
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	c9 01       	movw	r24, r18
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	82 0f       	add	r24, r18
    1c4e:	93 1f       	adc	r25, r19
    1c50:	48 2f       	mov	r20, r24
    1c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 01       	movw	r18, r24
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	98 89       	ldd	r25, Y+16	; 0x10
    1c62:	fc 01       	movw	r30, r24
    1c64:	e2 0f       	add	r30, r18
    1c66:	f3 1f       	adc	r31, r19
    1c68:	80 81       	ld	r24, Z
    1c6a:	84 0f       	add	r24, r20
    1c6c:	8d 87       	std	Y+13, r24	; 0x0d
            counter++;
    1c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	8b 87       	std	Y+11, r24	; 0x0b
        second_operant=intial_counter;
        frist_operant=result;
        u8 flag_mlti_division=intial_counter;
    
    
        while(counter<(num_character-2))
    1c74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 97       	sbiw	r24, 0x02	; 2
    1c82:	28 17       	cp	r18, r24
    1c84:	39 07       	cpc	r19, r25
    1c86:	0c f4       	brge	.+2      	; 0x1c8a <Hlcd_Voidcalc+0x302>
    1c88:	a3 ce       	rjmp	.-698    	; 0x19d0 <Hlcd_Voidcalc+0x48>
            else {
            second_operant=second_operant*10+contor[counter+1];
            counter++;
            }
        }
        if (flag_mlti_division==intial_counter){
    1c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <Hlcd_Voidcalc+0x30a>
    1c90:	90 c4       	rjmp	.+2336   	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
       
        result=second_operant+frist_operant;
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	89 0f       	add	r24, r25
    1c98:	8c 87       	std	Y+12, r24	; 0x0c
    1c9a:	8b c4       	rjmp	.+2326   	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
        }
        }
        // suptraction
        else if (contor[counter]=='-')
    1c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	98 89       	ldd	r25, Y+16	; 0x10
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	e2 0f       	add	r30, r18
    1caa:	f3 1f       	adc	r31, r19
    1cac:	80 81       	ld	r24, Z
    1cae:	8d 32       	cpi	r24, 0x2D	; 45
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <Hlcd_Voidcalc+0x32c>
    1cb2:	6d c1       	rjmp	.+730    	; 0x1f8e <Hlcd_Voidcalc+0x606>
    {
        second_operant=intial_counter;
    1cb4:	1d 86       	std	Y+13, r1	; 0x0d
        frist_operant=result;
    1cb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb8:	8e 87       	std	Y+14, r24	; 0x0e
        u8 flag_mlti_division=intial_counter;
    1cba:	1f 82       	std	Y+7, r1	; 0x07
    1cbc:	54 c1       	rjmp	.+680    	; 0x1f66 <Hlcd_Voidcalc+0x5de>
    
    
        while(counter<(num_character-2))
        {
            if(contor[counter+1]=='+')
    1cbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	2f 5f       	subi	r18, 0xFF	; 255
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e2 0f       	add	r30, r18
    1cd2:	f3 1f       	adc	r31, r19
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8b 32       	cpi	r24, 0x2B	; 43
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <Hlcd_Voidcalc+0x354>
    1cda:	50 c1       	rjmp	.+672    	; 0x1f7c <Hlcd_Voidcalc+0x5f4>

                break;


            }
            else if(contor[counter+1]=='-')
    1cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cea:	98 89       	ldd	r25, Y+16	; 0x10
    1cec:	fc 01       	movw	r30, r24
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8d 32       	cpi	r24, 0x2D	; 45
    1cf6:	69 f4       	brne	.+26     	; 0x1d12 <Hlcd_Voidcalc+0x38a>
            {
                
                
               
                result=frist_operant-second_operant;
    1cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	29 2f       	mov	r18, r25
    1cfe:	28 1b       	sub	r18, r24
    1d00:	82 2f       	mov	r24, r18
    1d02:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    1d04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d06:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=intial_counter;
    1d08:	1d 86       	std	Y+13, r1	; 0x0d
                counter++;
    1d0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	2a c1       	rjmp	.+596    	; 0x1f66 <Hlcd_Voidcalc+0x5de>


            }
            else if (contor[counter+1]=='*')
    1d12:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9c 01       	movw	r18, r24
    1d1a:	2f 5f       	subi	r18, 0xFF	; 255
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d20:	98 89       	ldd	r25, Y+16	; 0x10
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	8a 32       	cpi	r24, 0x2A	; 42
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <Hlcd_Voidcalc+0x3a8>
    1d2e:	76 c0       	rjmp	.+236    	; 0x1e1c <Hlcd_Voidcalc+0x494>
            {
                u8 third_operant=intial_counter;
    1d30:	1e 82       	std	Y+6, r1	; 0x06
                counter++;
    1d32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8b 87       	std	Y+11, r24	; 0x0b
                flag_mlti_division=1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	8f 83       	std	Y+7, r24	; 0x07
    1d3c:	1f c0       	rjmp	.+62     	; 0x1d7c <Hlcd_Voidcalc+0x3f4>
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 01       	movw	r18, r24
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	c9 01       	movw	r24, r18
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	82 0f       	add	r24, r18
    1d56:	93 1f       	adc	r25, r19
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9c 01       	movw	r18, r24
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d68:	98 89       	ldd	r25, Y+16	; 0x10
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	80 81       	ld	r24, Z
    1d72:	84 0f       	add	r24, r20
    1d74:	8e 83       	std	Y+6, r24	; 0x06
                      counter++;
    1d76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d78:	8f 5f       	subi	r24, 0xFF	; 255
    1d7a:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='*')
            {
                u8 third_operant=intial_counter;
                counter++;
                flag_mlti_division=1;
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    1d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c 01       	movw	r18, r24
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	98 89       	ldd	r25, Y+16	; 0x10
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	80 81       	ld	r24, Z
    1d94:	8a 32       	cpi	r24, 0x2A	; 42
    1d96:	c9 f1       	breq	.+114    	; 0x1e0a <Hlcd_Voidcalc+0x482>
    1d98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 01       	movw	r18, r24
    1da0:	2f 5f       	subi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da6:	98 89       	ldd	r25, Y+16	; 0x10
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	8b 32       	cpi	r24, 0x2B	; 43
    1db2:	59 f1       	breq	.+86     	; 0x1e0a <Hlcd_Voidcalc+0x482>
    1db4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 01       	movw	r18, r24
    1dbc:	2f 5f       	subi	r18, 0xFF	; 255
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	98 89       	ldd	r25, Y+16	; 0x10
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e2 0f       	add	r30, r18
    1dc8:	f3 1f       	adc	r31, r19
    1dca:	80 81       	ld	r24, Z
    1dcc:	8d 32       	cpi	r24, 0x2D	; 45
    1dce:	e9 f0       	breq	.+58     	; 0x1e0a <Hlcd_Voidcalc+0x482>
    1dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	98 89       	ldd	r25, Y+16	; 0x10
    1de0:	fc 01       	movw	r30, r24
    1de2:	e2 0f       	add	r30, r18
    1de4:	f3 1f       	adc	r31, r19
    1de6:	80 81       	ld	r24, Z
    1de8:	8f 32       	cpi	r24, 0x2F	; 47
    1dea:	79 f0       	breq	.+30     	; 0x1e0a <Hlcd_Voidcalc+0x482>
    1dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 01       	movw	r18, r24
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	98 89       	ldd	r25, Y+16	; 0x10
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e2 0f       	add	r30, r18
    1e00:	f3 1f       	adc	r31, r19
    1e02:	80 81       	ld	r24, Z
    1e04:	8d 33       	cpi	r24, 0x3D	; 61
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <Hlcd_Voidcalc+0x482>
    1e08:	9a cf       	rjmp	.-204    	; 0x1d3e <Hlcd_Voidcalc+0x3b6>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=-(third_operant*second_operant)+frist_operant;
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	98 9f       	mul	r25, r24
    1e10:	90 2d       	mov	r25, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e16:	89 1b       	sub	r24, r25
    1e18:	8c 87       	std	Y+12, r24	; 0x0c
    1e1a:	b0 c0       	rjmp	.+352    	; 0x1f7c <Hlcd_Voidcalc+0x5f4>
               

                break;
            }
            else if (contor[counter+1]=='/')
    1e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 01       	movw	r18, r24
    1e24:	2f 5f       	subi	r18, 0xFF	; 255
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	98 89       	ldd	r25, Y+16	; 0x10
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 32       	cpi	r24, 0x2F	; 47
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <Hlcd_Voidcalc+0x4b2>
    1e38:	77 c0       	rjmp	.+238    	; 0x1f28 <Hlcd_Voidcalc+0x5a0>
            {
                u8 third_operant=intial_counter;
    1e3a:	1d 82       	std	Y+5, r1	; 0x05
                counter++;
    1e3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
                flag_mlti_division=1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	8f 83       	std	Y+7, r24	; 0x07
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <Hlcd_Voidcalc+0x4fe>
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 01       	movw	r18, r24
    1e50:	22 0f       	add	r18, r18
    1e52:	33 1f       	adc	r19, r19
    1e54:	c9 01       	movw	r24, r18
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	82 0f       	add	r24, r18
    1e60:	93 1f       	adc	r25, r19
    1e62:	48 2f       	mov	r20, r24
    1e64:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 01       	movw	r18, r24
    1e6c:	2f 5f       	subi	r18, 0xFF	; 255
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 89       	ldd	r25, Y+16	; 0x10
    1e74:	fc 01       	movw	r30, r24
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	80 81       	ld	r24, Z
    1e7c:	84 0f       	add	r24, r20
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
                      counter++;
    1e80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='/')
            {
                u8 third_operant=intial_counter;
                counter++;
                flag_mlti_division=1;
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    1e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	2f 5f       	subi	r18, 0xFF	; 255
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e94:	98 89       	ldd	r25, Y+16	; 0x10
    1e96:	fc 01       	movw	r30, r24
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8a 32       	cpi	r24, 0x2A	; 42
    1ea0:	c9 f1       	breq	.+114    	; 0x1f14 <Hlcd_Voidcalc+0x58c>
    1ea2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb0:	98 89       	ldd	r25, Y+16	; 0x10
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e2 0f       	add	r30, r18
    1eb6:	f3 1f       	adc	r31, r19
    1eb8:	80 81       	ld	r24, Z
    1eba:	8b 32       	cpi	r24, 0x2B	; 43
    1ebc:	59 f1       	breq	.+86     	; 0x1f14 <Hlcd_Voidcalc+0x58c>
    1ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 01       	movw	r18, r24
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ecc:	98 89       	ldd	r25, Y+16	; 0x10
    1ece:	fc 01       	movw	r30, r24
    1ed0:	e2 0f       	add	r30, r18
    1ed2:	f3 1f       	adc	r31, r19
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8d 32       	cpi	r24, 0x2D	; 45
    1ed8:	e9 f0       	breq	.+58     	; 0x1f14 <Hlcd_Voidcalc+0x58c>
    1eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	2f 5f       	subi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	98 89       	ldd	r25, Y+16	; 0x10
    1eea:	fc 01       	movw	r30, r24
    1eec:	e2 0f       	add	r30, r18
    1eee:	f3 1f       	adc	r31, r19
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8f 32       	cpi	r24, 0x2F	; 47
    1ef4:	79 f0       	breq	.+30     	; 0x1f14 <Hlcd_Voidcalc+0x58c>
    1ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 01       	movw	r18, r24
    1efe:	2f 5f       	subi	r18, 0xFF	; 255
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f04:	98 89       	ldd	r25, Y+16	; 0x10
    1f06:	fc 01       	movw	r30, r24
    1f08:	e2 0f       	add	r30, r18
    1f0a:	f3 1f       	adc	r31, r19
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8d 33       	cpi	r24, 0x3D	; 61
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <Hlcd_Voidcalc+0x58c>
    1f12:	9a cf       	rjmp	.-204    	; 0x1e48 <Hlcd_Voidcalc+0x4c0>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=-(second_operant/third_operant)+frist_operant;
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	69 2f       	mov	r22, r25
    1f1a:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    1f1e:	98 2f       	mov	r25, r24
    1f20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f22:	89 1b       	sub	r24, r25
    1f24:	8c 87       	std	Y+12, r24	; 0x0c
    1f26:	2a c0       	rjmp	.+84     	; 0x1f7c <Hlcd_Voidcalc+0x5f4>
                break;
            }
            
            
            else {
            second_operant=second_operant*10+contor[counter+1];
    1f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 01       	movw	r18, r24
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	c9 01       	movw	r24, r18
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	48 2f       	mov	r20, r24
    1f44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	2f 5f       	subi	r18, 0xFF	; 255
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	98 89       	ldd	r25, Y+16	; 0x10
    1f54:	fc 01       	movw	r30, r24
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	80 81       	ld	r24, Z
    1f5c:	84 0f       	add	r24, r20
    1f5e:	8d 87       	std	Y+13, r24	; 0x0d
            counter++;
    1f60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
        second_operant=intial_counter;
        frist_operant=result;
        u8 flag_mlti_division=intial_counter;
    
    
        while(counter<(num_character-2))
    1f66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	89 89       	ldd	r24, Y+17	; 0x11
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 97       	sbiw	r24, 0x02	; 2
    1f74:	28 17       	cp	r18, r24
    1f76:	39 07       	cpc	r19, r25
    1f78:	0c f4       	brge	.+2      	; 0x1f7c <Hlcd_Voidcalc+0x5f4>
    1f7a:	a1 ce       	rjmp	.-702    	; 0x1cbe <Hlcd_Voidcalc+0x336>
            else {
            second_operant=second_operant*10+contor[counter+1];
            counter++;
            }
        }
        if (flag_mlti_division==intial_counter){
    1f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <Hlcd_Voidcalc+0x5fc>
    1f82:	17 c3       	rjmp	.+1582   	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
       
        result=frist_operant-second_operant;
    1f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f86:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f88:	89 1b       	sub	r24, r25
    1f8a:	8c 87       	std	Y+12, r24	; 0x0c
    1f8c:	12 c3       	rjmp	.+1572   	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
        }
        }
        //multiplay
        else  if (contor[counter]=='*')
    1f8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f96:	98 89       	ldd	r25, Y+16	; 0x10
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8a 32       	cpi	r24, 0x2A	; 42
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <Hlcd_Voidcalc+0x61e>
    1fa4:	76 c1       	rjmp	.+748    	; 0x2292 <Hlcd_Voidcalc+0x90a>
    {
        second_operant=0;
    1fa6:	1d 86       	std	Y+13, r1	; 0x0d
        frist_operant=result;
    1fa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1faa:	8e 87       	std	Y+14, r24	; 0x0e
    1fac:	60 c1       	rjmp	.+704    	; 0x226e <Hlcd_Voidcalc+0x8e6>
    
    
        while(counter<(num_character-2))
        {if(contor[counter+1]=='+')
    1fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	2f 5f       	subi	r18, 0xFF	; 255
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbc:	98 89       	ldd	r25, Y+16	; 0x10
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8b 32       	cpi	r24, 0x2B	; 43
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <Hlcd_Voidcalc+0x644>
    1fca:	5c c1       	rjmp	.+696    	; 0x2284 <Hlcd_Voidcalc+0x8fc>

                break;


            }
            else if(contor[counter+1]=='-')
    1fcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	2f 5f       	subi	r18, 0xFF	; 255
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	98 89       	ldd	r25, Y+16	; 0x10
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8d 32       	cpi	r24, 0x2D	; 45
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <Hlcd_Voidcalc+0x662>
    1fe8:	4d c1       	rjmp	.+666    	; 0x2284 <Hlcd_Voidcalc+0x8fc>

                break;


            }
             else if (contor[counter+1]=='*')
    1fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 01       	movw	r18, r24
    1ff2:	2f 5f       	subi	r18, 0xFF	; 255
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff8:	98 89       	ldd	r25, Y+16	; 0x10
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	80 81       	ld	r24, Z
    2002:	8a 32       	cpi	r24, 0x2A	; 42
    2004:	09 f0       	breq	.+2      	; 0x2008 <Hlcd_Voidcalc+0x680>
    2006:	8a c0       	rjmp	.+276    	; 0x211c <Hlcd_Voidcalc+0x794>
            {
                u8 third_operant=intial_counter;
    2008:	1c 82       	std	Y+4, r1	; 0x04
                counter++;
    200a:	8b 85       	ldd	r24, Y+11	; 0x0b
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	8b 87       	std	Y+11, r24	; 0x0b
    2010:	1f c0       	rjmp	.+62     	; 0x2050 <Hlcd_Voidcalc+0x6c8>
               
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 01       	movw	r18, r24
    201a:	22 0f       	add	r18, r18
    201c:	33 1f       	adc	r19, r19
    201e:	c9 01       	movw	r24, r18
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	82 0f       	add	r24, r18
    202a:	93 1f       	adc	r25, r19
    202c:	48 2f       	mov	r20, r24
    202e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 01       	movw	r18, r24
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	98 89       	ldd	r25, Y+16	; 0x10
    203e:	fc 01       	movw	r30, r24
    2040:	e2 0f       	add	r30, r18
    2042:	f3 1f       	adc	r31, r19
    2044:	80 81       	ld	r24, Z
    2046:	84 0f       	add	r24, r20
    2048:	8c 83       	std	Y+4, r24	; 0x04
                      counter++;
    204a:	8b 85       	ldd	r24, Y+11	; 0x0b
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	8b 87       	std	Y+11, r24	; 0x0b
             else if (contor[counter+1]=='*')
            {
                u8 third_operant=intial_counter;
                counter++;
               
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    2050:	8b 85       	ldd	r24, Y+11	; 0x0b
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9c 01       	movw	r18, r24
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	8f 85       	ldd	r24, Y+15	; 0x0f
    205e:	98 89       	ldd	r25, Y+16	; 0x10
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	80 81       	ld	r24, Z
    2068:	8a 32       	cpi	r24, 0x2A	; 42
    206a:	c9 f1       	breq	.+114    	; 0x20de <Hlcd_Voidcalc+0x756>
    206c:	8b 85       	ldd	r24, Y+11	; 0x0b
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 01       	movw	r18, r24
    2074:	2f 5f       	subi	r18, 0xFF	; 255
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	8f 85       	ldd	r24, Y+15	; 0x0f
    207a:	98 89       	ldd	r25, Y+16	; 0x10
    207c:	fc 01       	movw	r30, r24
    207e:	e2 0f       	add	r30, r18
    2080:	f3 1f       	adc	r31, r19
    2082:	80 81       	ld	r24, Z
    2084:	8b 32       	cpi	r24, 0x2B	; 43
    2086:	59 f1       	breq	.+86     	; 0x20de <Hlcd_Voidcalc+0x756>
    2088:	8b 85       	ldd	r24, Y+11	; 0x0b
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 01       	movw	r18, r24
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	98 89       	ldd	r25, Y+16	; 0x10
    2098:	fc 01       	movw	r30, r24
    209a:	e2 0f       	add	r30, r18
    209c:	f3 1f       	adc	r31, r19
    209e:	80 81       	ld	r24, Z
    20a0:	8d 32       	cpi	r24, 0x2D	; 45
    20a2:	e9 f0       	breq	.+58     	; 0x20de <Hlcd_Voidcalc+0x756>
    20a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9c 01       	movw	r18, r24
    20ac:	2f 5f       	subi	r18, 0xFF	; 255
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	98 89       	ldd	r25, Y+16	; 0x10
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 32       	cpi	r24, 0x2F	; 47
    20be:	79 f0       	breq	.+30     	; 0x20de <Hlcd_Voidcalc+0x756>
    20c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 01       	movw	r18, r24
    20c8:	2f 5f       	subi	r18, 0xFF	; 255
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ce:	98 89       	ldd	r25, Y+16	; 0x10
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 33       	cpi	r24, 0x3D	; 61
    20da:	09 f0       	breq	.+2      	; 0x20de <Hlcd_Voidcalc+0x756>
    20dc:	9a cf       	rjmp	.-204    	; 0x2012 <Hlcd_Voidcalc+0x68a>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=(third_operant*second_operant)*frist_operant;
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a9 01       	movw	r20, r18
    20ec:	48 9f       	mul	r20, r24
    20ee:	90 01       	movw	r18, r0
    20f0:	49 9f       	mul	r20, r25
    20f2:	30 0d       	add	r19, r0
    20f4:	58 9f       	mul	r21, r24
    20f6:	30 0d       	add	r19, r0
    20f8:	11 24       	eor	r1, r1
    20fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	ac 01       	movw	r20, r24
    2102:	24 9f       	mul	r18, r20
    2104:	c0 01       	movw	r24, r0
    2106:	25 9f       	mul	r18, r21
    2108:	90 0d       	add	r25, r0
    210a:	34 9f       	mul	r19, r20
    210c:	90 0d       	add	r25, r0
    210e:	11 24       	eor	r1, r1
    2110:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    2112:	8c 85       	ldd	r24, Y+12	; 0x0c
    2114:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=num1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	8d 87       	std	Y+13, r24	; 0x0d
    211a:	b4 c0       	rjmp	.+360    	; 0x2284 <Hlcd_Voidcalc+0x8fc>
               

                break;
            }
            else if (contor[counter+1]=='/')
    211c:	8b 85       	ldd	r24, Y+11	; 0x0b
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9c 01       	movw	r18, r24
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	8f 85       	ldd	r24, Y+15	; 0x0f
    212a:	98 89       	ldd	r25, Y+16	; 0x10
    212c:	fc 01       	movw	r30, r24
    212e:	e2 0f       	add	r30, r18
    2130:	f3 1f       	adc	r31, r19
    2132:	80 81       	ld	r24, Z
    2134:	8f 32       	cpi	r24, 0x2F	; 47
    2136:	09 f0       	breq	.+2      	; 0x213a <Hlcd_Voidcalc+0x7b2>
    2138:	7b c0       	rjmp	.+246    	; 0x2230 <Hlcd_Voidcalc+0x8a8>
            {
                u8 third_operant=intial_counter;
    213a:	1b 82       	std	Y+3, r1	; 0x03
                counter++;
    213c:	8b 85       	ldd	r24, Y+11	; 0x0b
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	8b 87       	std	Y+11, r24	; 0x0b
    2142:	1f c0       	rjmp	.+62     	; 0x2182 <Hlcd_Voidcalc+0x7fa>
            
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 01       	movw	r18, r24
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	c9 01       	movw	r24, r18
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	48 2f       	mov	r20, r24
    2160:	8b 85       	ldd	r24, Y+11	; 0x0b
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9c 01       	movw	r18, r24
    2168:	2f 5f       	subi	r18, 0xFF	; 255
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	fc 01       	movw	r30, r24
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	80 81       	ld	r24, Z
    2178:	84 0f       	add	r24, r20
    217a:	8b 83       	std	Y+3, r24	; 0x03
                      counter++;
    217c:	8b 85       	ldd	r24, Y+11	; 0x0b
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='/')
            {
                u8 third_operant=intial_counter;
                counter++;
            
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    2182:	8b 85       	ldd	r24, Y+11	; 0x0b
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 01       	movw	r18, r24
    218a:	2f 5f       	subi	r18, 0xFF	; 255
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2190:	98 89       	ldd	r25, Y+16	; 0x10
    2192:	fc 01       	movw	r30, r24
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	80 81       	ld	r24, Z
    219a:	8a 32       	cpi	r24, 0x2A	; 42
    219c:	c9 f1       	breq	.+114    	; 0x2210 <Hlcd_Voidcalc+0x888>
    219e:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9c 01       	movw	r18, r24
    21a6:	2f 5f       	subi	r18, 0xFF	; 255
    21a8:	3f 4f       	sbci	r19, 0xFF	; 255
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	fc 01       	movw	r30, r24
    21b0:	e2 0f       	add	r30, r18
    21b2:	f3 1f       	adc	r31, r19
    21b4:	80 81       	ld	r24, Z
    21b6:	8b 32       	cpi	r24, 0x2B	; 43
    21b8:	59 f1       	breq	.+86     	; 0x2210 <Hlcd_Voidcalc+0x888>
    21ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 01       	movw	r18, r24
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 89       	ldd	r25, Y+16	; 0x10
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	80 81       	ld	r24, Z
    21d2:	8d 32       	cpi	r24, 0x2D	; 45
    21d4:	e9 f0       	breq	.+58     	; 0x2210 <Hlcd_Voidcalc+0x888>
    21d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 01       	movw	r18, r24
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	98 89       	ldd	r25, Y+16	; 0x10
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 32       	cpi	r24, 0x2F	; 47
    21f0:	79 f0       	breq	.+30     	; 0x2210 <Hlcd_Voidcalc+0x888>
    21f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9c 01       	movw	r18, r24
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	80 81       	ld	r24, Z
    220a:	8d 33       	cpi	r24, 0x3D	; 61
    220c:	09 f0       	breq	.+2      	; 0x2210 <Hlcd_Voidcalc+0x888>
    220e:	9a cf       	rjmp	.-204    	; 0x2144 <Hlcd_Voidcalc+0x7bc>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=frist_operant*(second_operant/third_operant);
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	69 2f       	mov	r22, r25
    2216:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    221a:	98 2f       	mov	r25, r24
    221c:	8e 85       	ldd	r24, Y+14	; 0x0e
    221e:	98 9f       	mul	r25, r24
    2220:	80 2d       	mov	r24, r0
    2222:	11 24       	eor	r1, r1
    2224:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    2226:	8c 85       	ldd	r24, Y+12	; 0x0c
    2228:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=num1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8d 87       	std	Y+13, r24	; 0x0d
    222e:	2a c0       	rjmp	.+84     	; 0x2284 <Hlcd_Voidcalc+0x8fc>
                break;
            }
            
            else{
            
            second_operant=second_operant*10+contor[counter+1];
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9c 01       	movw	r18, r24
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	c9 01       	movw	r24, r18
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	82 0f       	add	r24, r18
    2248:	93 1f       	adc	r25, r19
    224a:	48 2f       	mov	r20, r24
    224c:	8b 85       	ldd	r24, Y+11	; 0x0b
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 01       	movw	r18, r24
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	98 89       	ldd	r25, Y+16	; 0x10
    225c:	fc 01       	movw	r30, r24
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	80 81       	ld	r24, Z
    2264:	84 0f       	add	r24, r20
    2266:	8d 87       	std	Y+13, r24	; 0x0d
            counter++;
    2268:	8b 85       	ldd	r24, Y+11	; 0x0b
    226a:	8f 5f       	subi	r24, 0xFF	; 255
    226c:	8b 87       	std	Y+11, r24	; 0x0b
    {
        second_operant=0;
        frist_operant=result;
    
    
        while(counter<(num_character-2))
    226e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	89 89       	ldd	r24, Y+17	; 0x11
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 97       	sbiw	r24, 0x02	; 2
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	0c f4       	brge	.+2      	; 0x2284 <Hlcd_Voidcalc+0x8fc>
    2282:	95 ce       	rjmp	.-726    	; 0x1fae <Hlcd_Voidcalc+0x626>
            second_operant=second_operant*10+contor[counter+1];
            counter++;
            }
            
        }
        result=frist_operant*second_operant;
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	9d 85       	ldd	r25, Y+13	; 0x0d
    2288:	89 9f       	mul	r24, r25
    228a:	80 2d       	mov	r24, r0
    228c:	11 24       	eor	r1, r1
    228e:	8c 87       	std	Y+12, r24	; 0x0c
    2290:	90 c1       	rjmp	.+800    	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
        
        }
        //division
        else  if (contor[counter]=='/')
    2292:	8b 85       	ldd	r24, Y+11	; 0x0b
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	98 89       	ldd	r25, Y+16	; 0x10
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 32       	cpi	r24, 0x2F	; 47
    22a6:	09 f0       	breq	.+2      	; 0x22aa <Hlcd_Voidcalc+0x922>
    22a8:	6c c1       	rjmp	.+728    	; 0x2582 <Hlcd_Voidcalc+0xbfa>
    {
        second_operant=0;
    22aa:	1d 86       	std	Y+13, r1	; 0x0d
        frist_operant=result;
    22ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    22ae:	8e 87       	std	Y+14, r24	; 0x0e
    22b0:	56 c1       	rjmp	.+684    	; 0x255e <Hlcd_Voidcalc+0xbd6>
    
    
        while(counter<(num_character-2))
        {if(contor[counter+1]=='+')
    22b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 01       	movw	r18, r24
    22ba:	2f 5f       	subi	r18, 0xFF	; 255
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	fc 01       	movw	r30, r24
    22c4:	e2 0f       	add	r30, r18
    22c6:	f3 1f       	adc	r31, r19
    22c8:	80 81       	ld	r24, Z
    22ca:	8b 32       	cpi	r24, 0x2B	; 43
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <Hlcd_Voidcalc+0x948>
    22ce:	52 c1       	rjmp	.+676    	; 0x2574 <Hlcd_Voidcalc+0xbec>

                break;


            }
            else if(contor[counter+1]=='-')
    22d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 01       	movw	r18, r24
    22d8:	2f 5f       	subi	r18, 0xFF	; 255
    22da:	3f 4f       	sbci	r19, 0xFF	; 255
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	98 89       	ldd	r25, Y+16	; 0x10
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	80 81       	ld	r24, Z
    22e8:	8d 32       	cpi	r24, 0x2D	; 45
    22ea:	09 f4       	brne	.+2      	; 0x22ee <Hlcd_Voidcalc+0x966>
    22ec:	43 c1       	rjmp	.+646    	; 0x2574 <Hlcd_Voidcalc+0xbec>

                break;


            }
             else if (contor[counter+1]=='*')
    22ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 01       	movw	r18, r24
    22f6:	2f 5f       	subi	r18, 0xFF	; 255
    22f8:	3f 4f       	sbci	r19, 0xFF	; 255
    22fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fc:	98 89       	ldd	r25, Y+16	; 0x10
    22fe:	fc 01       	movw	r30, r24
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	80 81       	ld	r24, Z
    2306:	8a 32       	cpi	r24, 0x2A	; 42
    2308:	09 f0       	breq	.+2      	; 0x230c <Hlcd_Voidcalc+0x984>
    230a:	7b c0       	rjmp	.+246    	; 0x2402 <Hlcd_Voidcalc+0xa7a>
            {
                u8 third_operant=intial_counter;
    230c:	1a 82       	std	Y+2, r1	; 0x02
                counter++;
    230e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	8b 87       	std	Y+11, r24	; 0x0b
    2314:	1f c0       	rjmp	.+62     	; 0x2354 <Hlcd_Voidcalc+0x9cc>
               
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	c9 01       	movw	r24, r18
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	48 2f       	mov	r20, r24
    2332:	8b 85       	ldd	r24, Y+11	; 0x0b
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9c 01       	movw	r18, r24
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2340:	98 89       	ldd	r25, Y+16	; 0x10
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	80 81       	ld	r24, Z
    234a:	84 0f       	add	r24, r20
    234c:	8a 83       	std	Y+2, r24	; 0x02
                      counter++;
    234e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	8b 87       	std	Y+11, r24	; 0x0b
             else if (contor[counter+1]=='*')
            {
                u8 third_operant=intial_counter;
                counter++;
               
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    2354:	8b 85       	ldd	r24, Y+11	; 0x0b
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 01       	movw	r18, r24
    235c:	2f 5f       	subi	r18, 0xFF	; 255
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	8f 85       	ldd	r24, Y+15	; 0x0f
    2362:	98 89       	ldd	r25, Y+16	; 0x10
    2364:	fc 01       	movw	r30, r24
    2366:	e2 0f       	add	r30, r18
    2368:	f3 1f       	adc	r31, r19
    236a:	80 81       	ld	r24, Z
    236c:	8a 32       	cpi	r24, 0x2A	; 42
    236e:	c9 f1       	breq	.+114    	; 0x23e2 <Hlcd_Voidcalc+0xa5a>
    2370:	8b 85       	ldd	r24, Y+11	; 0x0b
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 01       	movw	r18, r24
    2378:	2f 5f       	subi	r18, 0xFF	; 255
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	98 89       	ldd	r25, Y+16	; 0x10
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	8b 32       	cpi	r24, 0x2B	; 43
    238a:	59 f1       	breq	.+86     	; 0x23e2 <Hlcd_Voidcalc+0xa5a>
    238c:	8b 85       	ldd	r24, Y+11	; 0x0b
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 01       	movw	r18, r24
    2394:	2f 5f       	subi	r18, 0xFF	; 255
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	8f 85       	ldd	r24, Y+15	; 0x0f
    239a:	98 89       	ldd	r25, Y+16	; 0x10
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	80 81       	ld	r24, Z
    23a4:	8d 32       	cpi	r24, 0x2D	; 45
    23a6:	e9 f0       	breq	.+58     	; 0x23e2 <Hlcd_Voidcalc+0xa5a>
    23a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9c 01       	movw	r18, r24
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b6:	98 89       	ldd	r25, Y+16	; 0x10
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	80 81       	ld	r24, Z
    23c0:	8f 32       	cpi	r24, 0x2F	; 47
    23c2:	79 f0       	breq	.+30     	; 0x23e2 <Hlcd_Voidcalc+0xa5a>
    23c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9c 01       	movw	r18, r24
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d2:	98 89       	ldd	r25, Y+16	; 0x10
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	8d 33       	cpi	r24, 0x3D	; 61
    23de:	09 f0       	breq	.+2      	; 0x23e2 <Hlcd_Voidcalc+0xa5a>
    23e0:	9a cf       	rjmp	.-204    	; 0x2316 <Hlcd_Voidcalc+0x98e>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=frist_operant/second_operant*third_operant;
    23e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    23e6:	69 2f       	mov	r22, r25
    23e8:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    23ec:	98 2f       	mov	r25, r24
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	98 9f       	mul	r25, r24
    23f2:	80 2d       	mov	r24, r0
    23f4:	11 24       	eor	r1, r1
    23f6:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    23f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    23fa:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=num1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	8d 87       	std	Y+13, r24	; 0x0d
    2400:	b9 c0       	rjmp	.+370    	; 0x2574 <Hlcd_Voidcalc+0xbec>
               

                break;
            }
            else if (contor[counter+1]=='/')
    2402:	8b 85       	ldd	r24, Y+11	; 0x0b
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 01       	movw	r18, r24
    240a:	2f 5f       	subi	r18, 0xFF	; 255
    240c:	3f 4f       	sbci	r19, 0xFF	; 255
    240e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2410:	98 89       	ldd	r25, Y+16	; 0x10
    2412:	fc 01       	movw	r30, r24
    2414:	e2 0f       	add	r30, r18
    2416:	f3 1f       	adc	r31, r19
    2418:	80 81       	ld	r24, Z
    241a:	8f 32       	cpi	r24, 0x2F	; 47
    241c:	09 f0       	breq	.+2      	; 0x2420 <Hlcd_Voidcalc+0xa98>
    241e:	80 c0       	rjmp	.+256    	; 0x2520 <Hlcd_Voidcalc+0xb98>
            {
                u8 third_operant=intial_counter;
    2420:	19 82       	std	Y+1, r1	; 0x01
                counter++;
    2422:	8b 85       	ldd	r24, Y+11	; 0x0b
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	8b 87       	std	Y+11, r24	; 0x0b
    2428:	1f c0       	rjmp	.+62     	; 0x2468 <Hlcd_Voidcalc+0xae0>
            
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
                {
                      third_operant=third_operant*10+contor[counter+1];
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9c 01       	movw	r18, r24
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	c9 01       	movw	r24, r18
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	82 0f       	add	r24, r18
    2442:	93 1f       	adc	r25, r19
    2444:	48 2f       	mov	r20, r24
    2446:	8b 85       	ldd	r24, Y+11	; 0x0b
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 01       	movw	r18, r24
    244e:	2f 5f       	subi	r18, 0xFF	; 255
    2450:	3f 4f       	sbci	r19, 0xFF	; 255
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 89       	ldd	r25, Y+16	; 0x10
    2456:	fc 01       	movw	r30, r24
    2458:	e2 0f       	add	r30, r18
    245a:	f3 1f       	adc	r31, r19
    245c:	80 81       	ld	r24, Z
    245e:	84 0f       	add	r24, r20
    2460:	89 83       	std	Y+1, r24	; 0x01
                      counter++;
    2462:	8b 85       	ldd	r24, Y+11	; 0x0b
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	8b 87       	std	Y+11, r24	; 0x0b
            else if (contor[counter+1]=='/')
            {
                u8 third_operant=intial_counter;
                counter++;
            
                while((contor[counter+1]!='*')&&(contor[counter+1]!='+')&&(contor[counter+1]!='-')&&(contor[counter+1]!='/')&&(contor[counter+1]!='='))
    2468:	8b 85       	ldd	r24, Y+11	; 0x0b
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9c 01       	movw	r18, r24
    2470:	2f 5f       	subi	r18, 0xFF	; 255
    2472:	3f 4f       	sbci	r19, 0xFF	; 255
    2474:	8f 85       	ldd	r24, Y+15	; 0x0f
    2476:	98 89       	ldd	r25, Y+16	; 0x10
    2478:	fc 01       	movw	r30, r24
    247a:	e2 0f       	add	r30, r18
    247c:	f3 1f       	adc	r31, r19
    247e:	80 81       	ld	r24, Z
    2480:	8a 32       	cpi	r24, 0x2A	; 42
    2482:	c9 f1       	breq	.+114    	; 0x24f6 <Hlcd_Voidcalc+0xb6e>
    2484:	8b 85       	ldd	r24, Y+11	; 0x0b
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 01       	movw	r18, r24
    248c:	2f 5f       	subi	r18, 0xFF	; 255
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 89       	ldd	r25, Y+16	; 0x10
    2494:	fc 01       	movw	r30, r24
    2496:	e2 0f       	add	r30, r18
    2498:	f3 1f       	adc	r31, r19
    249a:	80 81       	ld	r24, Z
    249c:	8b 32       	cpi	r24, 0x2B	; 43
    249e:	59 f1       	breq	.+86     	; 0x24f6 <Hlcd_Voidcalc+0xb6e>
    24a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 01       	movw	r18, r24
    24a8:	2f 5f       	subi	r18, 0xFF	; 255
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ae:	98 89       	ldd	r25, Y+16	; 0x10
    24b0:	fc 01       	movw	r30, r24
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	80 81       	ld	r24, Z
    24b8:	8d 32       	cpi	r24, 0x2D	; 45
    24ba:	e9 f0       	breq	.+58     	; 0x24f6 <Hlcd_Voidcalc+0xb6e>
    24bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9c 01       	movw	r18, r24
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	98 89       	ldd	r25, Y+16	; 0x10
    24cc:	fc 01       	movw	r30, r24
    24ce:	e2 0f       	add	r30, r18
    24d0:	f3 1f       	adc	r31, r19
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 32       	cpi	r24, 0x2F	; 47
    24d6:	79 f0       	breq	.+30     	; 0x24f6 <Hlcd_Voidcalc+0xb6e>
    24d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9c 01       	movw	r18, r24
    24e0:	2f 5f       	subi	r18, 0xFF	; 255
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	98 89       	ldd	r25, Y+16	; 0x10
    24e8:	fc 01       	movw	r30, r24
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	80 81       	ld	r24, Z
    24f0:	8d 33       	cpi	r24, 0x3D	; 61
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <Hlcd_Voidcalc+0xb6e>
    24f4:	9a cf       	rjmp	.-204    	; 0x242a <Hlcd_Voidcalc+0xaa2>
                {
                      third_operant=third_operant*10+contor[counter+1];
                      counter++;
                }
                result=frist_operant/second_operant/third_operant;
    24f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    24fa:	69 2f       	mov	r22, r25
    24fc:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    2500:	48 2f       	mov	r20, r24
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	ca 01       	movw	r24, r20
    250c:	b9 01       	movw	r22, r18
    250e:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodhi4>
    2512:	cb 01       	movw	r24, r22
    2514:	8c 87       	std	Y+12, r24	; 0x0c
                frist_operant=result;
    2516:	8c 85       	ldd	r24, Y+12	; 0x0c
    2518:	8e 87       	std	Y+14, r24	; 0x0e
                second_operant=num1;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	8d 87       	std	Y+13, r24	; 0x0d
    251e:	2a c0       	rjmp	.+84     	; 0x2574 <Hlcd_Voidcalc+0xbec>
                break;
            }
            
            else{
            
            second_operant=second_operant*10+contor[counter+1];
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 01       	movw	r18, r24
    2528:	22 0f       	add	r18, r18
    252a:	33 1f       	adc	r19, r19
    252c:	c9 01       	movw	r24, r18
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	48 2f       	mov	r20, r24
    253c:	8b 85       	ldd	r24, Y+11	; 0x0b
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 01       	movw	r18, r24
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	98 89       	ldd	r25, Y+16	; 0x10
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	84 0f       	add	r24, r20
    2556:	8d 87       	std	Y+13, r24	; 0x0d
            counter++;
    2558:	8b 85       	ldd	r24, Y+11	; 0x0b
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    {
        second_operant=0;
        frist_operant=result;
    
    
        while(counter<(num_character-2))
    255e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	02 97       	sbiw	r24, 0x02	; 2
    256c:	28 17       	cp	r18, r24
    256e:	39 07       	cpc	r19, r25
    2570:	0c f4       	brge	.+2      	; 0x2574 <Hlcd_Voidcalc+0xbec>
    2572:	9f ce       	rjmp	.-706    	; 0x22b2 <Hlcd_Voidcalc+0x92a>
            second_operant=second_operant*10+contor[counter+1];
            counter++;
            }
            
        }
        result=frist_operant/second_operant;
    2574:	8e 85       	ldd	r24, Y+14	; 0x0e
    2576:	9d 85       	ldd	r25, Y+13	; 0x0d
    2578:	69 2f       	mov	r22, r25
    257a:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodqi4>
    257e:	8c 87       	std	Y+12, r24	; 0x0c
    2580:	18 c0       	rjmp	.+48     	; 0x25b2 <Hlcd_Voidcalc+0xc2a>
        
        }
    else {
    result=contor[counter]+result*10;
    2582:	8b 85       	ldd	r24, Y+11	; 0x0b
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	98 89       	ldd	r25, Y+16	; 0x10
    258c:	fc 01       	movw	r30, r24
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	40 81       	ld	r20, Z
    2594:	8c 85       	ldd	r24, Y+12	; 0x0c
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 01       	movw	r18, r24
    259c:	22 0f       	add	r18, r18
    259e:	33 1f       	adc	r19, r19
    25a0:	c9 01       	movw	r24, r18
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	84 0f       	add	r24, r20
    25b0:	8c 87       	std	Y+12, r24	; 0x0c
    }
    if (contor[counter+1]=='=')
    25b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9c 01       	movw	r18, r24
    25ba:	2f 5f       	subi	r18, 0xFF	; 255
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	98 89       	ldd	r25, Y+16	; 0x10
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	8d 33       	cpi	r24, 0x3D	; 61
    25cc:	29 f4       	brne	.+10     	; 0x25d8 <Hlcd_Voidcalc+0xc50>
    {
        DisplayVariable(result);
    25ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 86 0a 	call	0x150c	; 0x150c <DisplayVariable>
{
    u8 frist_operant=0;
    u8 second_operant=0;
    u8 result=0;
    u8 counter=0;
    for (counter=0;counter<(num_character-1);counter++)
    25d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	8b 87       	std	Y+11, r24	; 0x0b
    25de:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	89 89       	ldd	r24, Y+17	; 0x11
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	0c f4       	brge	.+2      	; 0x25f4 <Hlcd_Voidcalc+0xc6c>
    25f2:	dd c9       	rjmp	.-3142   	; 0x19ae <Hlcd_Voidcalc+0x26>
    if (contor[counter+1]=='=')
    {
        DisplayVariable(result);
    }
}
}
    25f4:	61 96       	adiw	r28, 0x11	; 17
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <HLCD_Void_GetArrayAndNumOfElement>:
//func get array of character
void HLCD_Void_GetArrayAndNumOfElement(char*contor  ,u8 *num_character,u8 *result)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	66 97       	sbiw	r28, 0x16	; 22
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	89 8b       	std	Y+17, r24	; 0x11
    261e:	7c 8b       	std	Y+20, r23	; 0x14
    2620:	6b 8b       	std	Y+19, r22	; 0x13
    2622:	5e 8b       	std	Y+22, r21	; 0x16
    2624:	4d 8b       	std	Y+21, r20	; 0x15
        u8 pressed_key=intial_counter;
    2626:	18 8a       	std	Y+16, r1	; 0x10
        u8 num_of_character=num0;
    2628:	1f 86       	std	Y+15, r1	; 0x0f
    262a:	96 c0       	rjmp	.+300    	; 0x2758 <HLCD_Void_GetArrayAndNumOfElement+0x152>
        while (pressed_key!=key12)
        {
       if( pressed_key=Hkpd_u8GetKeyPressed()){
    262c:	0e 94 06 14 	call	0x280c	; 0x280c <Hkpd_u8GetKeyPressed>
    2630:	88 8b       	std	Y+16, r24	; 0x10
    2632:	88 89       	ldd	r24, Y+16	; 0x10
    2634:	88 23       	and	r24, r24
    2636:	09 f4       	brne	.+2      	; 0x263a <HLCD_Void_GetArrayAndNumOfElement+0x34>
    2638:	8f c0       	rjmp	.+286    	; 0x2758 <HLCD_Void_GetArrayAndNumOfElement+0x152>
          if(pressed_key==key4)
    263a:	88 89       	ldd	r24, Y+16	; 0x10
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	09 f0       	breq	.+2      	; 0x2642 <HLCD_Void_GetArrayAndNumOfElement+0x3c>
    2640:	7d c0       	rjmp	.+250    	; 0x273c <HLCD_Void_GetArrayAndNumOfElement+0x136>
          {
        HLCD_VoidCSendCommand(display_clear); 
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_VoidCSendCommand>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e2       	ldi	r26, 0x20	; 32
    264e:	b2 e4       	ldi	r27, 0x42	; 66
    2650:	8b 87       	std	Y+11, r24	; 0x0b
    2652:	9c 87       	std	Y+12, r25	; 0x0c
    2654:	ad 87       	std	Y+13, r26	; 0x0d
    2656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6b 85       	ldd	r22, Y+11	; 0x0b
    265a:	7c 85       	ldd	r23, Y+12	; 0x0c
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a ef       	ldi	r20, 0xFA	; 250
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8f 83       	std	Y+7, r24	; 0x07
    2672:	98 87       	std	Y+8, r25	; 0x08
    2674:	a9 87       	std	Y+9, r26	; 0x09
    2676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2678:	6f 81       	ldd	r22, Y+7	; 0x07
    267a:	78 85       	ldd	r23, Y+8	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <HLCD_Void_GetArrayAndNumOfElement+0x94>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <HLCD_Void_GetArrayAndNumOfElement+0x112>
	else if (__tmp > 65535)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <HLCD_Void_GetArrayAndNumOfElement+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <HLCD_Void_GetArrayAndNumOfElement+0xf4>
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <HLCD_Void_GetArrayAndNumOfElement+0xe2>
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <HLCD_Void_GetArrayAndNumOfElement+0xd6>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <HLCD_Void_GetArrayAndNumOfElement+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <HLCD_Void_GetArrayAndNumOfElement+0x11e>
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(40); 
        HLCD_VoidGoto(row1,col1); 
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	0e 94 23 0a 	call	0x1446	; 0x1446 <HLCD_VoidGoto>
        num_of_character=0;
    2734:	1f 86       	std	Y+15, r1	; 0x0f
        result=0;
    2736:	1e 8a       	std	Y+22, r1	; 0x16
    2738:	1d 8a       	std	Y+21, r1	; 0x15
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <HLCD_Void_GetArrayAndNumOfElement+0x152>
        } 
        else{
        HLCD_VoidKpdDisplay(pressed_key,&contor[num_of_character]);
    273c:	8f 85       	ldd	r24, Y+15	; 0x0f
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	9a 89       	ldd	r25, Y+18	; 0x12
    2746:	28 0f       	add	r18, r24
    2748:	39 1f       	adc	r19, r25
    274a:	88 89       	ldd	r24, Y+16	; 0x10
    274c:	b9 01       	movw	r22, r18
    274e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <HLCD_VoidKpdDisplay>
        num_of_character++;
    2752:	8f 85       	ldd	r24, Y+15	; 0x0f
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	8f 87       	std	Y+15, r24	; 0x0f
//func get array of character
void HLCD_Void_GetArrayAndNumOfElement(char*contor  ,u8 *num_character,u8 *result)
{
        u8 pressed_key=intial_counter;
        u8 num_of_character=num0;
        while (pressed_key!=key12)
    2758:	88 89       	ldd	r24, Y+16	; 0x10
    275a:	8c 30       	cpi	r24, 0x0C	; 12
    275c:	09 f0       	breq	.+2      	; 0x2760 <HLCD_Void_GetArrayAndNumOfElement+0x15a>
    275e:	66 cf       	rjmp	.-308    	; 0x262c <HLCD_Void_GetArrayAndNumOfElement+0x26>
        HLCD_VoidKpdDisplay(pressed_key,&contor[num_of_character]);
        num_of_character++;
        }
       }
        }
        *(num_character)=num_of_character;
    2760:	eb 89       	ldd	r30, Y+19	; 0x13
    2762:	fc 89       	ldd	r31, Y+20	; 0x14
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	80 83       	st	Z, r24

}
    2768:	66 96       	adiw	r28, 0x16	; 22
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <Hkpd_voidInitKeypad>:
#include "Hkeypad_private.h"

u8 row_array[4]={row1,row2,row3,row4};
u8 colum_array[4]={colum1,colum2,colum3,colum4};
void Hkpd_voidInitKeypad(void)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    u8 counter =intial_counter;
    2784:	19 82       	std	Y+1, r1	; 0x01
    2786:	1b c0       	rjmp	.+54     	; 0x27be <Hkpd_voidInitKeypad+0x44>
     //make row input pull up
    for(counter;counter<num_row;counter++)
    {
        MDIO_voidSetPinDirection(row_port,row_array[counter],INPUT);
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	fc 01       	movw	r30, r24
    2790:	e2 59       	subi	r30, 0x92	; 146
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	90 81       	ld	r25, Z
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	69 2f       	mov	r22, r25
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
        MDIO_voidSetPinValue(row_port,row_array[counter],HIGH);
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	e2 59       	subi	r30, 0x92	; 146
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	90 81       	ld	r25, Z
    27ae:	84 e0       	ldi	r24, 0x04	; 4
    27b0:	69 2f       	mov	r22, r25
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
u8 colum_array[4]={colum1,colum2,colum3,colum4};
void Hkpd_voidInitKeypad(void)
{
    u8 counter =intial_counter;
     //make row input pull up
    for(counter;counter<num_row;counter++)
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	84 30       	cpi	r24, 0x04	; 4
    27c2:	10 f3       	brcs	.-60     	; 0x2788 <Hkpd_voidInitKeypad+0xe>
    {
        MDIO_voidSetPinDirection(row_port,row_array[counter],INPUT);
        MDIO_voidSetPinValue(row_port,row_array[counter],HIGH);
    }
    //make colum  high
    counter=intial_counter;
    27c4:	19 82       	std	Y+1, r1	; 0x01
    27c6:	1b c0       	rjmp	.+54     	; 0x27fe <Hkpd_voidInitKeypad+0x84>
    for(counter;counter<num_colum;counter++)
    {
         MDIO_voidSetPinDirection(colum_port,colum_array[counter],OUTPOT);
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	fc 01       	movw	r30, r24
    27d0:	ee 58       	subi	r30, 0x8E	; 142
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	90 81       	ld	r25, Z
    27d6:	84 e0       	ldi	r24, 0x04	; 4
    27d8:	69 2f       	mov	r22, r25
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
         MDIO_voidSetPinValue(colum_port,colum_array[counter],HIGH);
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	fc 01       	movw	r30, r24
    27e8:	ee 58       	subi	r30, 0x8E	; 142
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	90 81       	ld	r25, Z
    27ee:	84 e0       	ldi	r24, 0x04	; 4
    27f0:	69 2f       	mov	r22, r25
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
        MDIO_voidSetPinDirection(row_port,row_array[counter],INPUT);
        MDIO_voidSetPinValue(row_port,row_array[counter],HIGH);
    }
    //make colum  high
    counter=intial_counter;
    for(counter;counter<num_colum;counter++)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	84 30       	cpi	r24, 0x04	; 4
    2802:	10 f3       	brcs	.-60     	; 0x27c8 <Hkpd_voidInitKeypad+0x4e>
         MDIO_voidSetPinDirection(colum_port,colum_array[counter],OUTPOT);
         MDIO_voidSetPinValue(colum_port,colum_array[counter],HIGH);
    }

    
}
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <Hkpd_u8GetKeyPressed>:
u8 Hkpd_u8GetKeyPressed (void)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <Hkpd_u8GetKeyPressed+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <Hkpd_u8GetKeyPressed+0x8>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    u8 row_counter   =intial_counter;
    2818:	1b 82       	std	Y+3, r1	; 0x03
    u8 colum_counter =intial_counter;
    281a:	1a 82       	std	Y+2, r1	; 0x02
    u8 staues_key    =notpressd;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8c 83       	std	Y+4, r24	; 0x04
    u8 pressed_key   =not_key;
    2820:	19 82       	std	Y+1, r1	; 0x01
    for(colum_counter=intial_counter;colum_counter<num_colum;colum_counter++)
    2822:	1a 82       	std	Y+2, r1	; 0x02
    2824:	51 c0       	rjmp	.+162    	; 0x28c8 <Hkpd_u8GetKeyPressed+0xbc>
    {
        MDIO_voidSetPinValue(colum_port,colum_array[colum_counter],LOW);
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	fc 01       	movw	r30, r24
    282e:	ee 58       	subi	r30, 0x8E	; 142
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	90 81       	ld	r25, Z
    2834:	84 e0       	ldi	r24, 0x04	; 4
    2836:	69 2f       	mov	r22, r25
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
        for(row_counter=intial_counter;row_counter<num_row;row_counter++)
    283e:	1b 82       	std	Y+3, r1	; 0x03
    2840:	31 c0       	rjmp	.+98     	; 0x28a4 <Hkpd_u8GetKeyPressed+0x98>
        {
            MDIO_StatusGetPinValue(row_port,row_array[row_counter],&staues_key);
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	fc 01       	movw	r30, r24
    284a:	e2 59       	subi	r30, 0x92	; 146
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	90 81       	ld	r25, Z
    2850:	9e 01       	movw	r18, r28
    2852:	2c 5f       	subi	r18, 0xFC	; 252
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	84 e0       	ldi	r24, 0x04	; 4
    2858:	69 2f       	mov	r22, r25
    285a:	a9 01       	movw	r20, r18
    285c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <MDIO_StatusGetPinValue>
    2860:	1b c0       	rjmp	.+54     	; 0x2898 <Hkpd_u8GetKeyPressed+0x8c>
            while (staues_key==pressed)
            {
                pressed_key=PressedKeyEqn;
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	98 2f       	mov	r25, r24
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	89 0f       	add	r24, r25
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	89 83       	std	Y+1, r24	; 0x01
            MDIO_StatusGetPinValue(row_port,row_array[row_counter],&staues_key);
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	fc 01       	movw	r30, r24
    2882:	e2 59       	subi	r30, 0x92	; 146
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	90 81       	ld	r25, Z
    2888:	9e 01       	movw	r18, r28
    288a:	2c 5f       	subi	r18, 0xFC	; 252
    288c:	3f 4f       	sbci	r19, 0xFF	; 255
    288e:	84 e0       	ldi	r24, 0x04	; 4
    2890:	69 2f       	mov	r22, r25
    2892:	a9 01       	movw	r20, r18
    2894:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <MDIO_StatusGetPinValue>
    {
        MDIO_voidSetPinValue(colum_port,colum_array[colum_counter],LOW);
        for(row_counter=intial_counter;row_counter<num_row;row_counter++)
        {
            MDIO_StatusGetPinValue(row_port,row_array[row_counter],&staues_key);
            while (staues_key==pressed)
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	88 23       	and	r24, r24
    289c:	11 f3       	breq	.-60     	; 0x2862 <Hkpd_u8GetKeyPressed+0x56>
    u8 staues_key    =notpressd;
    u8 pressed_key   =not_key;
    for(colum_counter=intial_counter;colum_counter<num_colum;colum_counter++)
    {
        MDIO_voidSetPinValue(colum_port,colum_array[colum_counter],LOW);
        for(row_counter=intial_counter;row_counter<num_row;row_counter++)
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	84 30       	cpi	r24, 0x04	; 4
    28a8:	60 f2       	brcs	.-104    	; 0x2842 <Hkpd_u8GetKeyPressed+0x36>
            {
                pressed_key=PressedKeyEqn;
            MDIO_StatusGetPinValue(row_port,row_array[row_counter],&staues_key);
            }
        }
        MDIO_voidSetPinValue(colum_port,colum_array[colum_counter],HIGH);
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	fc 01       	movw	r30, r24
    28b2:	ee 58       	subi	r30, 0x8E	; 142
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	90 81       	ld	r25, Z
    28b8:	84 e0       	ldi	r24, 0x04	; 4
    28ba:	69 2f       	mov	r22, r25
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <MDIO_voidSetPinValue>
{
    u8 row_counter   =intial_counter;
    u8 colum_counter =intial_counter;
    u8 staues_key    =notpressd;
    u8 pressed_key   =not_key;
    for(colum_counter=intial_counter;colum_counter<num_colum;colum_counter++)
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	8a 83       	std	Y+2, r24	; 0x02
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	84 30       	cpi	r24, 0x04	; 4
    28cc:	08 f4       	brcc	.+2      	; 0x28d0 <Hkpd_u8GetKeyPressed+0xc4>
    28ce:	ab cf       	rjmp	.-170    	; 0x2826 <Hkpd_u8GetKeyPressed+0x1a>
            }
        }
        MDIO_voidSetPinValue(colum_port,colum_array[colum_counter],HIGH);

    }
    return pressed_key;
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <MDIO_voidSetPinDirection>:
#include "MDIO_Config.h"
#include "MDIO_Interface.h"


	void MDIO_voidSetPinDirection (u8 A_u8Portnumber, u8 A_u8Pinnumber , u8 A_u8DIRICTION )
	{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	2d 97       	sbiw	r28, 0x0d	; 13
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	6a 83       	std	Y+2, r22	; 0x02
    28f8:	4b 83       	std	Y+3, r20	; 0x03

        if(A_u8Portnumber < PORTA || A_u8Portnumber > PORTD){
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	88 23       	and	r24, r24
    28fe:	09 f4       	brne	.+2      	; 0x2902 <MDIO_voidSetPinDirection+0x22>
    2900:	0d c1       	rjmp	.+538    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	85 30       	cpi	r24, 0x05	; 5
    2906:	08 f0       	brcs	.+2      	; 0x290a <MDIO_voidSetPinDirection+0x2a>
    2908:	09 c1       	rjmp	.+530    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			/* Wrong PORT */
	}else if(A_u8Pinnumber < PIN0 || A_u8Pinnumber > PIN7){
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	88 30       	cpi	r24, 0x08	; 8
    290e:	08 f0       	brcs	.+2      	; 0x2912 <MDIO_voidSetPinDirection+0x32>
    2910:	05 c1       	rjmp	.+522    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			/* Wrong PIN */
	}else if (A_u8DIRICTION < INPUT || A_u8DIRICTION > OUTPOT){
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	82 30       	cpi	r24, 0x02	; 2
    2916:	08 f0       	brcs	.+2      	; 0x291a <MDIO_voidSetPinDirection+0x3a>
    2918:	01 c1       	rjmp	.+514    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			/* Wrong Direction */
	}else{
		
          switch (A_u8Portnumber){
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3d 87       	std	Y+13, r19	; 0x0d
    2922:	2c 87       	std	Y+12, r18	; 0x0c
    2924:	8c 85       	ldd	r24, Y+12	; 0x0c
    2926:	9d 85       	ldd	r25, Y+13	; 0x0d
    2928:	82 30       	cpi	r24, 0x02	; 2
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <MDIO_voidSetPinDirection+0x50>
    292e:	50 c0       	rjmp	.+160    	; 0x29d0 <MDIO_voidSetPinDirection+0xf0>
    2930:	2c 85       	ldd	r18, Y+12	; 0x0c
    2932:	3d 85       	ldd	r19, Y+13	; 0x0d
    2934:	23 30       	cpi	r18, 0x03	; 3
    2936:	31 05       	cpc	r19, r1
    2938:	34 f4       	brge	.+12     	; 0x2946 <MDIO_voidSetPinDirection+0x66>
    293a:	8c 85       	ldd	r24, Y+12	; 0x0c
    293c:	9d 85       	ldd	r25, Y+13	; 0x0d
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	91 05       	cpc	r25, r1
    2942:	71 f0       	breq	.+28     	; 0x2960 <MDIO_voidSetPinDirection+0x80>
    2944:	eb c0       	rjmp	.+470    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
    2946:	2c 85       	ldd	r18, Y+12	; 0x0c
    2948:	3d 85       	ldd	r19, Y+13	; 0x0d
    294a:	23 30       	cpi	r18, 0x03	; 3
    294c:	31 05       	cpc	r19, r1
    294e:	09 f4       	brne	.+2      	; 0x2952 <MDIO_voidSetPinDirection+0x72>
    2950:	77 c0       	rjmp	.+238    	; 0x2a40 <MDIO_voidSetPinDirection+0x160>
    2952:	8c 85       	ldd	r24, Y+12	; 0x0c
    2954:	9d 85       	ldd	r25, Y+13	; 0x0d
    2956:	84 30       	cpi	r24, 0x04	; 4
    2958:	91 05       	cpc	r25, r1
    295a:	09 f4       	brne	.+2      	; 0x295e <MDIO_voidSetPinDirection+0x7e>
    295c:	a9 c0       	rjmp	.+338    	; 0x2ab0 <MDIO_voidSetPinDirection+0x1d0>
    295e:	de c0       	rjmp	.+444    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			case PORTA:
			switch (A_u8DIRICTION)
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	3b 87       	std	Y+11, r19	; 0x0b
    2968:	2a 87       	std	Y+10, r18	; 0x0a
    296a:	8a 85       	ldd	r24, Y+10	; 0x0a
    296c:	9b 85       	ldd	r25, Y+11	; 0x0b
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	d1 f0       	breq	.+52     	; 0x29a6 <MDIO_voidSetPinDirection+0xc6>
    2972:	2a 85       	ldd	r18, Y+10	; 0x0a
    2974:	3b 85       	ldd	r19, Y+11	; 0x0b
    2976:	21 30       	cpi	r18, 0x01	; 1
    2978:	31 05       	cpc	r19, r1
    297a:	09 f0       	breq	.+2      	; 0x297e <MDIO_voidSetPinDirection+0x9e>
    297c:	cf c0       	rjmp	.+414    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			{
				case OUTPOT:
				Set_Bit(u8DDRA_Regester,A_u8Pinnumber);
    297e:	aa e3       	ldi	r26, 0x3A	; 58
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ea e3       	ldi	r30, 0x3A	; 58
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	48 2f       	mov	r20, r24
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	02 2e       	mov	r0, r18
    2996:	02 c0       	rjmp	.+4      	; 0x299c <MDIO_voidSetPinDirection+0xbc>
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	0a 94       	dec	r0
    299e:	e2 f7       	brpl	.-8      	; 0x2998 <MDIO_voidSetPinDirection+0xb8>
    29a0:	84 2b       	or	r24, r20
    29a2:	8c 93       	st	X, r24
    29a4:	bb c0       	rjmp	.+374    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
                break;

				case INPUT:
				Clr_Bit (u8DDRA_Regester,A_u8Pinnumber);
    29a6:	aa e3       	ldi	r26, 0x3A	; 58
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ea e3       	ldi	r30, 0x3A	; 58
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	48 2f       	mov	r20, r24
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	02 2e       	mov	r0, r18
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <MDIO_voidSetPinDirection+0xe4>
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	0a 94       	dec	r0
    29c6:	e2 f7       	brpl	.-8      	; 0x29c0 <MDIO_voidSetPinDirection+0xe0>
    29c8:	80 95       	com	r24
    29ca:	84 23       	and	r24, r20
    29cc:	8c 93       	st	X, r24
    29ce:	a6 c0       	rjmp	.+332    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
				break;
			}
			break;

            case PORTB:
			switch (A_u8DIRICTION)
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	39 87       	std	Y+9, r19	; 0x09
    29d8:	28 87       	std	Y+8, r18	; 0x08
    29da:	88 85       	ldd	r24, Y+8	; 0x08
    29dc:	99 85       	ldd	r25, Y+9	; 0x09
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	d1 f0       	breq	.+52     	; 0x2a16 <MDIO_voidSetPinDirection+0x136>
    29e2:	28 85       	ldd	r18, Y+8	; 0x08
    29e4:	39 85       	ldd	r19, Y+9	; 0x09
    29e6:	21 30       	cpi	r18, 0x01	; 1
    29e8:	31 05       	cpc	r19, r1
    29ea:	09 f0       	breq	.+2      	; 0x29ee <MDIO_voidSetPinDirection+0x10e>
    29ec:	97 c0       	rjmp	.+302    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			{
				case OUTPOT:
				Set_Bit(u8DDRB_Regester,A_u8Pinnumber);
    29ee:	a7 e3       	ldi	r26, 0x37	; 55
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e7 e3       	ldi	r30, 0x37	; 55
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	48 2f       	mov	r20, r24
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	02 2e       	mov	r0, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <MDIO_voidSetPinDirection+0x12c>
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	0a 94       	dec	r0
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <MDIO_voidSetPinDirection+0x128>
    2a10:	84 2b       	or	r24, r20
    2a12:	8c 93       	st	X, r24
    2a14:	83 c0       	rjmp	.+262    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
                break;

				case INPUT:
				Clr_Bit (u8DDRB_Regester,A_u8Pinnumber);
    2a16:	a7 e3       	ldi	r26, 0x37	; 55
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e7 e3       	ldi	r30, 0x37	; 55
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	48 2f       	mov	r20, r24
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	02 2e       	mov	r0, r18
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <MDIO_voidSetPinDirection+0x154>
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	0a 94       	dec	r0
    2a36:	e2 f7       	brpl	.-8      	; 0x2a30 <MDIO_voidSetPinDirection+0x150>
    2a38:	80 95       	com	r24
    2a3a:	84 23       	and	r24, r20
    2a3c:	8c 93       	st	X, r24
    2a3e:	6e c0       	rjmp	.+220    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
				break;
			}
			break;

			case PORTC:
			switch (A_u8DIRICTION)
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	3f 83       	std	Y+7, r19	; 0x07
    2a48:	2e 83       	std	Y+6, r18	; 0x06
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	d1 f0       	breq	.+52     	; 0x2a86 <MDIO_voidSetPinDirection+0x1a6>
    2a52:	2e 81       	ldd	r18, Y+6	; 0x06
    2a54:	3f 81       	ldd	r19, Y+7	; 0x07
    2a56:	21 30       	cpi	r18, 0x01	; 1
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <MDIO_voidSetPinDirection+0x17e>
    2a5c:	5f c0       	rjmp	.+190    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			{
				case OUTPOT:
				Set_Bit(u8DDRC_Regester,A_u8Pinnumber);
    2a5e:	a4 e3       	ldi	r26, 0x34	; 52
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e4 e3       	ldi	r30, 0x34	; 52
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	48 2f       	mov	r20, r24
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	02 2e       	mov	r0, r18
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <MDIO_voidSetPinDirection+0x19c>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	0a 94       	dec	r0
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <MDIO_voidSetPinDirection+0x198>
    2a80:	84 2b       	or	r24, r20
    2a82:	8c 93       	st	X, r24
    2a84:	4b c0       	rjmp	.+150    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
                break;

				case INPUT:
				Clr_Bit (u8DDRC_Regester,A_u8Pinnumber);
    2a86:	a4 e3       	ldi	r26, 0x34	; 52
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e4 e3       	ldi	r30, 0x34	; 52
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	48 2f       	mov	r20, r24
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	02 2e       	mov	r0, r18
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <MDIO_voidSetPinDirection+0x1c4>
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	0a 94       	dec	r0
    2aa6:	e2 f7       	brpl	.-8      	; 0x2aa0 <MDIO_voidSetPinDirection+0x1c0>
    2aa8:	80 95       	com	r24
    2aaa:	84 23       	and	r24, r20
    2aac:	8c 93       	st	X, r24
    2aae:	36 c0       	rjmp	.+108    	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
				break;
			}
			break;

			case PORTD:
			switch (A_u8DIRICTION)
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3d 83       	std	Y+5, r19	; 0x05
    2ab8:	2c 83       	std	Y+4, r18	; 0x04
    2aba:	8c 81       	ldd	r24, Y+4	; 0x04
    2abc:	9d 81       	ldd	r25, Y+5	; 0x05
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	c9 f0       	breq	.+50     	; 0x2af4 <MDIO_voidSetPinDirection+0x214>
    2ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac6:	21 30       	cpi	r18, 0x01	; 1
    2ac8:	31 05       	cpc	r19, r1
    2aca:	41 f5       	brne	.+80     	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
			{
				case OUTPOT:
				Set_Bit(u8DDRD_Regester,A_u8Pinnumber);
    2acc:	a1 e3       	ldi	r26, 0x31	; 49
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e1 e3       	ldi	r30, 0x31	; 49
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 2e       	mov	r0, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <MDIO_voidSetPinDirection+0x20a>
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	0a 94       	dec	r0
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <MDIO_voidSetPinDirection+0x206>
    2aee:	84 2b       	or	r24, r20
    2af0:	8c 93       	st	X, r24
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <MDIO_voidSetPinDirection+0x23c>
                break;

				case INPUT:
				Clr_Bit (u8DDRD_Regester,A_u8Pinnumber);
    2af4:	a1 e3       	ldi	r26, 0x31	; 49
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e1 e3       	ldi	r30, 0x31	; 49
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <MDIO_voidSetPinDirection+0x232>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <MDIO_voidSetPinDirection+0x22e>
    2b16:	80 95       	com	r24
    2b18:	84 23       	and	r24, r20
    2b1a:	8c 93       	st	X, r24
			}
			break;
			
		  }
		}
	}
    2b1c:	2d 96       	adiw	r28, 0x0d	; 13
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <MDIO_voidSetPinValue>:



	

	void MDIO_voidSetPinValue(u8 A_u8PortID, u8 A_u8PinID, u8 A_u8Value){
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	2d 97       	sbiw	r28, 0x0d	; 13
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	6a 83       	std	Y+2, r22	; 0x02
    2b46:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PortID < PORTA || A_u8PortID > PORTD){
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	88 23       	and	r24, r24
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <MDIO_voidSetPinValue+0x22>
    2b4e:	0e c1       	rjmp	.+540    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	85 30       	cpi	r24, 0x05	; 5
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <MDIO_voidSetPinValue+0x2a>
    2b56:	0a c1       	rjmp	.+532    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
			/* Wrong PORT */
	}else if(A_u8PinID < PIN0 || A_u8PinID > PIN7){
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	88 30       	cpi	r24, 0x08	; 8
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <MDIO_voidSetPinValue+0x32>
    2b5e:	06 c1       	rjmp	.+524    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
			/* Wrong PIN */
	}else if (A_u8Value < LOW || A_u8Value > HIGH){
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <MDIO_voidSetPinValue+0x3a>
    2b66:	02 c1       	rjmp	.+516    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
			/* Wrong Value */
	}else{

		switch (A_u8PortID){
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3d 87       	std	Y+13, r19	; 0x0d
    2b70:	2c 87       	std	Y+12, r18	; 0x0c
    2b72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b74:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b76:	82 30       	cpi	r24, 0x02	; 2
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <MDIO_voidSetPinValue+0x50>
    2b7c:	50 c0       	rjmp	.+160    	; 0x2c1e <MDIO_voidSetPinValue+0xf0>
    2b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b80:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b82:	23 30       	cpi	r18, 0x03	; 3
    2b84:	31 05       	cpc	r19, r1
    2b86:	34 f4       	brge	.+12     	; 0x2b94 <MDIO_voidSetPinValue+0x66>
    2b88:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	91 05       	cpc	r25, r1
    2b90:	71 f0       	breq	.+28     	; 0x2bae <MDIO_voidSetPinValue+0x80>
    2b92:	ec c0       	rjmp	.+472    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
    2b94:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b96:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b98:	23 30       	cpi	r18, 0x03	; 3
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <MDIO_voidSetPinValue+0x72>
    2b9e:	77 c0       	rjmp	.+238    	; 0x2c8e <MDIO_voidSetPinValue+0x160>
    2ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ba4:	84 30       	cpi	r24, 0x04	; 4
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <MDIO_voidSetPinValue+0x7e>
    2baa:	a9 c0       	rjmp	.+338    	; 0x2cfe <MDIO_voidSetPinValue+0x1d0>
    2bac:	df c0       	rjmp	.+446    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>

		case PORTA:
			switch(A_u8Value){
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	3b 87       	std	Y+11, r19	; 0x0b
    2bb6:	2a 87       	std	Y+10, r18	; 0x0a
    2bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	31 f0       	breq	.+12     	; 0x2bcc <MDIO_voidSetPinValue+0x9e>
    2bc0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2bc2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2bc4:	21 30       	cpi	r18, 0x01	; 1
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	b1 f0       	breq	.+44     	; 0x2bf6 <MDIO_voidSetPinValue+0xc8>
    2bca:	d0 c0       	rjmp	.+416    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
				case LOW:
					Clr_Bit(u8PORTA_Regester, A_u8PinID);
    2bcc:	ab e3       	ldi	r26, 0x3B	; 59
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	eb e3       	ldi	r30, 0x3B	; 59
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	48 2f       	mov	r20, r24
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	02 2e       	mov	r0, r18
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <MDIO_voidSetPinValue+0xbc>
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	0a 94       	dec	r0
    2bec:	e2 f7       	brpl	.-8      	; 0x2be6 <MDIO_voidSetPinValue+0xb8>
    2bee:	80 95       	com	r24
    2bf0:	84 23       	and	r24, r20
    2bf2:	8c 93       	st	X, r24
    2bf4:	bb c0       	rjmp	.+374    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
				case HIGH:
					Set_Bit(u8PORTA_Regester, A_u8PinID);
    2bf6:	ab e3       	ldi	r26, 0x3B	; 59
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	eb e3       	ldi	r30, 0x3B	; 59
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	48 2f       	mov	r20, r24
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	02 2e       	mov	r0, r18
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <MDIO_voidSetPinValue+0xe6>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	0a 94       	dec	r0
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <MDIO_voidSetPinValue+0xe2>
    2c18:	84 2b       	or	r24, r20
    2c1a:	8c 93       	st	X, r24
    2c1c:	a7 c0       	rjmp	.+334    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
			}
			break;
		case PORTB:
			switch(A_u8Value){
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	39 87       	std	Y+9, r19	; 0x09
    2c26:	28 87       	std	Y+8, r18	; 0x08
    2c28:	88 85       	ldd	r24, Y+8	; 0x08
    2c2a:	99 85       	ldd	r25, Y+9	; 0x09
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	31 f0       	breq	.+12     	; 0x2c3c <MDIO_voidSetPinValue+0x10e>
    2c30:	28 85       	ldd	r18, Y+8	; 0x08
    2c32:	39 85       	ldd	r19, Y+9	; 0x09
    2c34:	21 30       	cpi	r18, 0x01	; 1
    2c36:	31 05       	cpc	r19, r1
    2c38:	b1 f0       	breq	.+44     	; 0x2c66 <MDIO_voidSetPinValue+0x138>
    2c3a:	98 c0       	rjmp	.+304    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
				case LOW:
					Clr_Bit(u8PORTB_Regester , A_u8PinID);
    2c3c:	a8 e3       	ldi	r26, 0x38	; 56
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e8 e3       	ldi	r30, 0x38	; 56
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	48 2f       	mov	r20, r24
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	02 2e       	mov	r0, r18
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <MDIO_voidSetPinValue+0x12c>
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	0a 94       	dec	r0
    2c5c:	e2 f7       	brpl	.-8      	; 0x2c56 <MDIO_voidSetPinValue+0x128>
    2c5e:	80 95       	com	r24
    2c60:	84 23       	and	r24, r20
    2c62:	8c 93       	st	X, r24
    2c64:	83 c0       	rjmp	.+262    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
				case HIGH:
					Set_Bit(u8PORTB_Regester , A_u8PinID);
    2c66:	a8 e3       	ldi	r26, 0x38	; 56
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e8 e3       	ldi	r30, 0x38	; 56
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	48 2f       	mov	r20, r24
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	02 2e       	mov	r0, r18
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <MDIO_voidSetPinValue+0x156>
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	0a 94       	dec	r0
    2c86:	e2 f7       	brpl	.-8      	; 0x2c80 <MDIO_voidSetPinValue+0x152>
    2c88:	84 2b       	or	r24, r20
    2c8a:	8c 93       	st	X, r24
    2c8c:	6f c0       	rjmp	.+222    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
			}
			break;
		case PORTC:
			switch(A_u8Value){
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	3f 83       	std	Y+7, r19	; 0x07
    2c96:	2e 83       	std	Y+6, r18	; 0x06
    2c98:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	31 f0       	breq	.+12     	; 0x2cac <MDIO_voidSetPinValue+0x17e>
    2ca0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ca4:	21 30       	cpi	r18, 0x01	; 1
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	b1 f0       	breq	.+44     	; 0x2cd6 <MDIO_voidSetPinValue+0x1a8>
    2caa:	60 c0       	rjmp	.+192    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
				case LOW:
					Clr_Bit(u8PORTC_Regester , A_u8PinID);
    2cac:	a5 e3       	ldi	r26, 0x35	; 53
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e5 e3       	ldi	r30, 0x35	; 53
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	48 2f       	mov	r20, r24
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	02 2e       	mov	r0, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <MDIO_voidSetPinValue+0x19c>
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	0a 94       	dec	r0
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <MDIO_voidSetPinValue+0x198>
    2cce:	80 95       	com	r24
    2cd0:	84 23       	and	r24, r20
    2cd2:	8c 93       	st	X, r24
    2cd4:	4b c0       	rjmp	.+150    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
				case HIGH:
					Set_Bit(u8PORTC_Regester , A_u8PinID);
    2cd6:	a5 e3       	ldi	r26, 0x35	; 53
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e5 e3       	ldi	r30, 0x35	; 53
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 2e       	mov	r0, r18
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <MDIO_voidSetPinValue+0x1c6>
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	0a 94       	dec	r0
    2cf6:	e2 f7       	brpl	.-8      	; 0x2cf0 <MDIO_voidSetPinValue+0x1c2>
    2cf8:	84 2b       	or	r24, r20
    2cfa:	8c 93       	st	X, r24
    2cfc:	37 c0       	rjmp	.+110    	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
			}
			break;
		case PORTD:
			switch(A_u8Value){
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	3d 83       	std	Y+5, r19	; 0x05
    2d06:	2c 83       	std	Y+4, r18	; 0x04
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	31 f0       	breq	.+12     	; 0x2d1c <MDIO_voidSetPinValue+0x1ee>
    2d10:	2c 81       	ldd	r18, Y+4	; 0x04
    2d12:	3d 81       	ldd	r19, Y+5	; 0x05
    2d14:	21 30       	cpi	r18, 0x01	; 1
    2d16:	31 05       	cpc	r19, r1
    2d18:	b1 f0       	breq	.+44     	; 0x2d46 <MDIO_voidSetPinValue+0x218>
    2d1a:	28 c0       	rjmp	.+80     	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
				case LOW:
					Clr_Bit(u8PORTD_Regester , A_u8PinID);
    2d1c:	a2 e3       	ldi	r26, 0x32	; 50
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e2 e3       	ldi	r30, 0x32	; 50
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	48 2f       	mov	r20, r24
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 2e       	mov	r0, r18
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <MDIO_voidSetPinValue+0x20c>
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	0a 94       	dec	r0
    2d3c:	e2 f7       	brpl	.-8      	; 0x2d36 <MDIO_voidSetPinValue+0x208>
    2d3e:	80 95       	com	r24
    2d40:	84 23       	and	r24, r20
    2d42:	8c 93       	st	X, r24
    2d44:	13 c0       	rjmp	.+38     	; 0x2d6c <MDIO_voidSetPinValue+0x23e>
					break;
				case HIGH:
					Set_Bit(u8PORTD_Regester , A_u8PinID);
    2d46:	a2 e3       	ldi	r26, 0x32	; 50
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e2 e3       	ldi	r30, 0x32	; 50
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	48 2f       	mov	r20, r24
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 2e       	mov	r0, r18
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <MDIO_voidSetPinValue+0x236>
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	0a 94       	dec	r0
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <MDIO_voidSetPinValue+0x232>
    2d68:	84 2b       	or	r24, r20
    2d6a:	8c 93       	st	X, r24
					break;
			}
			break;
		}
	}
}
    2d6c:	2d 96       	adiw	r28, 0x0d	; 13
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <MDIO_StatusGetPinValue>:

		
	ErrorState_t MDIO_StatusGetPinValue(u8 A_u8PortID, u8 A_u8PinID, u8* AP_u8ValuePointer) {
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	27 97       	sbiw	r28, 0x07	; 7
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	8a 83       	std	Y+2, r24	; 0x02
    2d94:	6b 83       	std	Y+3, r22	; 0x03
    2d96:	5d 83       	std	Y+5, r21	; 0x05
    2d98:	4c 83       	std	Y+4, r20	; 0x04

	ErrorState_t L_StatusRet = Return_OK;
    2d9a:	19 82       	std	Y+1, r1	; 0x01

	if ((A_u8PortID < PORTA) || (A_u8PortID > PORTD)) {
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	88 23       	and	r24, r24
    2da0:	19 f0       	breq	.+6      	; 0x2da8 <MDIO_StatusGetPinValue+0x2a>
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	85 30       	cpi	r24, 0x05	; 5
    2da6:	18 f0       	brcs	.+6      	; 0x2dae <MDIO_StatusGetPinValue+0x30>

		/* Wrong Port */
		L_StatusRet = Return_NOK;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	76 c0       	rjmp	.+236    	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>


	} else if ((A_u8PinID < PIN0) || (A_u8PinID > PIN7)) {
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	88 30       	cpi	r24, 0x08	; 8
    2db2:	18 f0       	brcs	.+6      	; 0x2dba <MDIO_StatusGetPinValue+0x3c>

		/* Wrong Pin */
		L_StatusRet = Return_NOK;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	70 c0       	rjmp	.+224    	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>


	} else {

		switch (A_u8PortID) {
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	3f 83       	std	Y+7, r19	; 0x07
    2dc2:	2e 83       	std	Y+6, r18	; 0x06
    2dc4:	4e 81       	ldd	r20, Y+6	; 0x06
    2dc6:	5f 81       	ldd	r21, Y+7	; 0x07
    2dc8:	42 30       	cpi	r20, 0x02	; 2
    2dca:	51 05       	cpc	r21, r1
    2dcc:	59 f1       	breq	.+86     	; 0x2e24 <MDIO_StatusGetPinValue+0xa6>
    2dce:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	34 f4       	brge	.+12     	; 0x2de4 <MDIO_StatusGetPinValue+0x66>
    2dd8:	2e 81       	ldd	r18, Y+6	; 0x06
    2dda:	3f 81       	ldd	r19, Y+7	; 0x07
    2ddc:	21 30       	cpi	r18, 0x01	; 1
    2dde:	31 05       	cpc	r19, r1
    2de0:	69 f0       	breq	.+26     	; 0x2dfc <MDIO_StatusGetPinValue+0x7e>
    2de2:	5b c0       	rjmp	.+182    	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>
    2de4:	4e 81       	ldd	r20, Y+6	; 0x06
    2de6:	5f 81       	ldd	r21, Y+7	; 0x07
    2de8:	43 30       	cpi	r20, 0x03	; 3
    2dea:	51 05       	cpc	r21, r1
    2dec:	79 f1       	breq	.+94     	; 0x2e4c <MDIO_StatusGetPinValue+0xce>
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	9f 81       	ldd	r25, Y+7	; 0x07
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	91 05       	cpc	r25, r1
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <MDIO_StatusGetPinValue+0x7c>
    2df8:	3d c0       	rjmp	.+122    	; 0x2e74 <MDIO_StatusGetPinValue+0xf6>
    2dfa:	4f c0       	rjmp	.+158    	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>

		case PORTA:*AP_u8ValuePointer = Get_Bit(u8PINA_Regester, A_u8PinID); break;
    2dfc:	e9 e3       	ldi	r30, 0x39	; 57
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	a9 01       	movw	r20, r18
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <MDIO_StatusGetPinValue+0x96>
    2e10:	55 95       	asr	r21
    2e12:	47 95       	ror	r20
    2e14:	8a 95       	dec	r24
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <MDIO_StatusGetPinValue+0x92>
    2e18:	ca 01       	movw	r24, r20
    2e1a:	81 70       	andi	r24, 0x01	; 1
    2e1c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e1e:	fd 81       	ldd	r31, Y+5	; 0x05
    2e20:	80 83       	st	Z, r24
    2e22:	3b c0       	rjmp	.+118    	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>

		case PORTB:*AP_u8ValuePointer = Get_Bit(u8PINB_Regester, A_u8PinID); break;
    2e24:	e6 e3       	ldi	r30, 0x36	; 54
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a9 01       	movw	r20, r18
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <MDIO_StatusGetPinValue+0xbe>
    2e38:	55 95       	asr	r21
    2e3a:	47 95       	ror	r20
    2e3c:	8a 95       	dec	r24
    2e3e:	e2 f7       	brpl	.-8      	; 0x2e38 <MDIO_StatusGetPinValue+0xba>
    2e40:	ca 01       	movw	r24, r20
    2e42:	81 70       	andi	r24, 0x01	; 1
    2e44:	ec 81       	ldd	r30, Y+4	; 0x04
    2e46:	fd 81       	ldd	r31, Y+5	; 0x05
    2e48:	80 83       	st	Z, r24
    2e4a:	27 c0       	rjmp	.+78     	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>

		case PORTC:*AP_u8ValuePointer = Get_Bit(u8PINC_Regester, A_u8PinID); break;
    2e4c:	e3 e3       	ldi	r30, 0x33	; 51
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a9 01       	movw	r20, r18
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <MDIO_StatusGetPinValue+0xe6>
    2e60:	55 95       	asr	r21
    2e62:	47 95       	ror	r20
    2e64:	8a 95       	dec	r24
    2e66:	e2 f7       	brpl	.-8      	; 0x2e60 <MDIO_StatusGetPinValue+0xe2>
    2e68:	ca 01       	movw	r24, r20
    2e6a:	81 70       	andi	r24, 0x01	; 1
    2e6c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e6e:	fd 81       	ldd	r31, Y+5	; 0x05
    2e70:	80 83       	st	Z, r24
    2e72:	13 c0       	rjmp	.+38     	; 0x2e9a <MDIO_StatusGetPinValue+0x11c>

		case PORTD:*AP_u8ValuePointer = Get_Bit(u8PIND_Regester, A_u8PinID); break;
    2e74:	e0 e3       	ldi	r30, 0x30	; 48
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	a9 01       	movw	r20, r18
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <MDIO_StatusGetPinValue+0x10e>
    2e88:	55 95       	asr	r21
    2e8a:	47 95       	ror	r20
    2e8c:	8a 95       	dec	r24
    2e8e:	e2 f7       	brpl	.-8      	; 0x2e88 <MDIO_StatusGetPinValue+0x10a>
    2e90:	ca 01       	movw	r24, r20
    2e92:	81 70       	andi	r24, 0x01	; 1
    2e94:	ec 81       	ldd	r30, Y+4	; 0x04
    2e96:	fd 81       	ldd	r31, Y+5	; 0x05
    2e98:	80 83       	st	Z, r24

		

	}

	return L_StatusRet;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e9c:	27 96       	adiw	r28, 0x07	; 7
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <MDIO_voidSetPortDirection>:
		void MDIO_voidSetPortDirection(u8 A_u8PortID,  u8 A_u8direction)
		{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <MDIO_voidSetPortDirection+0x6>
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <MDIO_voidSetPortDirection+0x8>
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	6a 83       	std	Y+2, r22	; 0x02
		
			
				switch(A_u8PortID)
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	3c 83       	std	Y+4, r19	; 0x04
    2ec6:	2b 83       	std	Y+3, r18	; 0x03
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	82 30       	cpi	r24, 0x02	; 2
    2ece:	91 05       	cpc	r25, r1
    2ed0:	d9 f0       	breq	.+54     	; 0x2f08 <MDIO_voidSetPortDirection+0x5a>
    2ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed6:	23 30       	cpi	r18, 0x03	; 3
    2ed8:	31 05       	cpc	r19, r1
    2eda:	34 f4       	brge	.+12     	; 0x2ee8 <MDIO_voidSetPortDirection+0x3a>
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	61 f0       	breq	.+24     	; 0x2efe <MDIO_voidSetPortDirection+0x50>
    2ee6:	1e c0       	rjmp	.+60     	; 0x2f24 <MDIO_voidSetPortDirection+0x76>
    2ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eea:	3c 81       	ldd	r19, Y+4	; 0x04
    2eec:	23 30       	cpi	r18, 0x03	; 3
    2eee:	31 05       	cpc	r19, r1
    2ef0:	81 f0       	breq	.+32     	; 0x2f12 <MDIO_voidSetPortDirection+0x64>
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef6:	84 30       	cpi	r24, 0x04	; 4
    2ef8:	91 05       	cpc	r25, r1
    2efa:	81 f0       	breq	.+32     	; 0x2f1c <MDIO_voidSetPortDirection+0x6e>
    2efc:	13 c0       	rjmp	.+38     	; 0x2f24 <MDIO_voidSetPortDirection+0x76>
				{ 
					case PORTA:
					 u8DDRA_Regester=A_u8direction; break;
    2efe:	ea e3       	ldi	r30, 0x3A	; 58
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	80 83       	st	Z, r24
    2f06:	0e c0       	rjmp	.+28     	; 0x2f24 <MDIO_voidSetPortDirection+0x76>
						
					case PORTB:
				    u8DDRB_Regester=A_u8direction; break;
    2f08:	e7 e3       	ldi	r30, 0x37	; 55
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	80 83       	st	Z, r24
    2f10:	09 c0       	rjmp	.+18     	; 0x2f24 <MDIO_voidSetPortDirection+0x76>

						
				case PORTC:
				    u8DDRC_Regester=A_u8direction; break;
    2f12:	e4 e3       	ldi	r30, 0x34	; 52
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	80 83       	st	Z, r24
    2f1a:	04 c0       	rjmp	.+8      	; 0x2f24 <MDIO_voidSetPortDirection+0x76>
                case PORTD:
				    u8DDRD_Regester=A_u8direction; break;
    2f1c:	e1 e3       	ldi	r30, 0x31	; 49
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	80 83       	st	Z, r24

                    default:
                    break;
				}

		}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <MDIO_voidSetPortValue>:
		void MDIO_voidSetPortValue(u8 A_u8PortID,  u8 A_u8value)
		{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <MDIO_voidSetPortValue+0x6>
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <MDIO_voidSetPortValue+0x8>
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	6a 83       	std	Y+2, r22	; 0x02
		
			
				switch(A_u8PortID)
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	3c 83       	std	Y+4, r19	; 0x04
    2f4a:	2b 83       	std	Y+3, r18	; 0x03
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	91 05       	cpc	r25, r1
    2f54:	d9 f0       	breq	.+54     	; 0x2f8c <MDIO_voidSetPortValue+0x5a>
    2f56:	2b 81       	ldd	r18, Y+3	; 0x03
    2f58:	3c 81       	ldd	r19, Y+4	; 0x04
    2f5a:	23 30       	cpi	r18, 0x03	; 3
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	34 f4       	brge	.+12     	; 0x2f6c <MDIO_voidSetPortValue+0x3a>
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	91 05       	cpc	r25, r1
    2f68:	61 f0       	breq	.+24     	; 0x2f82 <MDIO_voidSetPortValue+0x50>
    2f6a:	1e c0       	rjmp	.+60     	; 0x2fa8 <MDIO_voidSetPortValue+0x76>
    2f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f70:	23 30       	cpi	r18, 0x03	; 3
    2f72:	31 05       	cpc	r19, r1
    2f74:	81 f0       	breq	.+32     	; 0x2f96 <MDIO_voidSetPortValue+0x64>
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	81 f0       	breq	.+32     	; 0x2fa0 <MDIO_voidSetPortValue+0x6e>
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <MDIO_voidSetPortValue+0x76>
				{ 
					case PORTA: u8PORTA_Regester=A_u8value; break;
    2f82:	eb e3       	ldi	r30, 0x3B	; 59
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	80 83       	st	Z, r24
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <MDIO_voidSetPortValue+0x76>
					case PORTB: u8PORTB_Regester=A_u8value; break;
    2f8c:	e8 e3       	ldi	r30, 0x38	; 56
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	80 83       	st	Z, r24
    2f94:	09 c0       	rjmp	.+18     	; 0x2fa8 <MDIO_voidSetPortValue+0x76>
					case PORTC: u8PORTC_Regester=A_u8value; break;
    2f96:	e5 e3       	ldi	r30, 0x35	; 53
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	80 83       	st	Z, r24
    2f9e:	04 c0       	rjmp	.+8      	; 0x2fa8 <MDIO_voidSetPortValue+0x76>
					case PORTD: u8PORTD_Regester=A_u8value; break;
    2fa0:	e2 e3       	ldi	r30, 0x32	; 50
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	80 83       	st	Z, r24
					
                    default:
                    break;
				}

		}
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <MDIO_voidTogglePin>:
		void MDIO_voidTogglePin(u8 A_u8PortID,  u8 A_u8PinNumber)
		{
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <MDIO_voidTogglePin+0x6>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <MDIO_voidTogglePin+0x8>
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	6a 83       	std	Y+2, r22	; 0x02
			switch (A_u8PortID)
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	3c 83       	std	Y+4, r19	; 0x04
    2fce:	2b 83       	std	Y+3, r18	; 0x03
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	82 30       	cpi	r24, 0x02	; 2
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	51 f1       	breq	.+84     	; 0x302e <MDIO_voidTogglePin+0x78>
    2fda:	2b 81       	ldd	r18, Y+3	; 0x03
    2fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    2fde:	23 30       	cpi	r18, 0x03	; 3
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	34 f4       	brge	.+12     	; 0x2ff0 <MDIO_voidTogglePin+0x3a>
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	91 05       	cpc	r25, r1
    2fec:	61 f0       	breq	.+24     	; 0x3006 <MDIO_voidTogglePin+0x50>
    2fee:	5a c0       	rjmp	.+180    	; 0x30a4 <MDIO_voidTogglePin+0xee>
    2ff0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff4:	23 30       	cpi	r18, 0x03	; 3
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	71 f1       	breq	.+92     	; 0x3056 <MDIO_voidTogglePin+0xa0>
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	84 30       	cpi	r24, 0x04	; 4
    3000:	91 05       	cpc	r25, r1
    3002:	e9 f1       	breq	.+122    	; 0x307e <MDIO_voidTogglePin+0xc8>
    3004:	4f c0       	rjmp	.+158    	; 0x30a4 <MDIO_voidTogglePin+0xee>
			{
				case PORTA: Tog_Bit(u8PORTA_Regester,A_u8PinNumber); break;
    3006:	ab e3       	ldi	r26, 0x3B	; 59
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	eb e3       	ldi	r30, 0x3B	; 59
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	48 2f       	mov	r20, r24
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	02 2e       	mov	r0, r18
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <MDIO_voidTogglePin+0x6e>
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	0a 94       	dec	r0
    3026:	e2 f7       	brpl	.-8      	; 0x3020 <MDIO_voidTogglePin+0x6a>
    3028:	84 27       	eor	r24, r20
    302a:	8c 93       	st	X, r24
    302c:	3b c0       	rjmp	.+118    	; 0x30a4 <MDIO_voidTogglePin+0xee>
				case PORTB: Tog_Bit(u8PORTB_Regester,A_u8PinNumber); break;
    302e:	a8 e3       	ldi	r26, 0x38	; 56
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e8 e3       	ldi	r30, 0x38	; 56
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	48 2f       	mov	r20, r24
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	02 2e       	mov	r0, r18
    3046:	02 c0       	rjmp	.+4      	; 0x304c <MDIO_voidTogglePin+0x96>
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	0a 94       	dec	r0
    304e:	e2 f7       	brpl	.-8      	; 0x3048 <MDIO_voidTogglePin+0x92>
    3050:	84 27       	eor	r24, r20
    3052:	8c 93       	st	X, r24
    3054:	27 c0       	rjmp	.+78     	; 0x30a4 <MDIO_voidTogglePin+0xee>
				case PORTC: Tog_Bit(u8PORTC_Regester,A_u8PinNumber); break;
    3056:	a5 e3       	ldi	r26, 0x35	; 53
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e5 e3       	ldi	r30, 0x35	; 53
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	48 2f       	mov	r20, r24
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	02 2e       	mov	r0, r18
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <MDIO_voidTogglePin+0xbe>
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	0a 94       	dec	r0
    3076:	e2 f7       	brpl	.-8      	; 0x3070 <MDIO_voidTogglePin+0xba>
    3078:	84 27       	eor	r24, r20
    307a:	8c 93       	st	X, r24
    307c:	13 c0       	rjmp	.+38     	; 0x30a4 <MDIO_voidTogglePin+0xee>
				case PORTD: Tog_Bit(u8PORTD_Regester,A_u8PinNumber); break;
    307e:	a2 e3       	ldi	r26, 0x32	; 50
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e2 e3       	ldi	r30, 0x32	; 50
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	48 2f       	mov	r20, r24
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	02 2e       	mov	r0, r18
    3096:	02 c0       	rjmp	.+4      	; 0x309c <MDIO_voidTogglePin+0xe6>
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	0a 94       	dec	r0
    309e:	e2 f7       	brpl	.-8      	; 0x3098 <MDIO_voidTogglePin+0xe2>
    30a0:	84 27       	eor	r24, r20
    30a2:	8c 93       	st	X, r24
				default :
				break;


			}
		}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <main>:
#include"HLCD_interface.h"
#include "HLCD_Private.h"
#include "avr/delay.h"
#include "HkeyPad_interface.h"
void main()
{
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	66 97       	sbiw	r28, 0x16	; 22
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPortDirection(PORTA,full_port);
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	6f ef       	ldi	r22, 0xFF	; 255
    30ca:	0e 94 57 17 	call	0x2eae	; 0x2eae <MDIO_voidSetPortDirection>
    MDIO_voidSetPinDirection(PORTC,PIN0,OUTPOT);
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(PORTC,PIN1,OUTPOT);
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(PORTC,PIN2,OUTPOT);
    30e2:	83 e0       	ldi	r24, 0x03	; 3
    30e4:	62 e0       	ldi	r22, 0x02	; 2
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 70 14 	call	0x28e0	; 0x28e0 <MDIO_voidSetPinDirection>
    HLCD_VoidInitLCD();
    30ec:	0e 94 c3 07 	call	0xf86	; 0xf86 <HLCD_VoidInitLCD>
    Hkpd_voidInitKeypad();
    30f0:	0e 94 bd 13 	call	0x277a	; 0x277a <Hkpd_voidInitKeypad>
    u8 pressed_key=intial_counter;
    30f4:	1c 82       	std	Y+4, r1	; 0x04
    u8 num_character=intial_counter;
    30f6:	1d 82       	std	Y+5, r1	; 0x05
    char contor[16];
    u8 frist_operant=num0;
    30f8:	1b 82       	std	Y+3, r1	; 0x03
    u8 second_operant=num0;
    30fa:	1a 82       	std	Y+2, r1	; 0x02
    u8 result=num0;
    30fc:	1e 8a       	std	Y+22, r1	; 0x16
    u8 counter=num0;
    30fe:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {

        HLCD_Void_GetArrayAndNumOfElement(contor,&num_character,&result);
    3100:	ce 01       	movw	r24, r28
    3102:	06 96       	adiw	r24, 0x06	; 6
    3104:	9e 01       	movw	r18, r28
    3106:	2b 5f       	subi	r18, 0xFB	; 251
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	ae 01       	movw	r20, r28
    310c:	4a 5e       	subi	r20, 0xEA	; 234
    310e:	5f 4f       	sbci	r21, 0xFF	; 255
    3110:	b9 01       	movw	r22, r18
    3112:	0e 94 03 13 	call	0x2606	; 0x2606 <HLCD_Void_GetArrayAndNumOfElement>
        
        Hlcd_Voidcalc(contor,num_character);
    3116:	2d 81       	ldd	r18, Y+5	; 0x05
    3118:	ce 01       	movw	r24, r28
    311a:	06 96       	adiw	r24, 0x06	; 6
    311c:	62 2f       	mov	r22, r18
    311e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <Hlcd_Voidcalc>
    3122:	03 c0       	rjmp	.+6      	; 0x312a <main+0x78>
    

        while(pressed_key==key12)
        {
            pressed_key=Hkpd_u8GetKeyPressed();
    3124:	0e 94 06 14 	call	0x280c	; 0x280c <Hkpd_u8GetKeyPressed>
    3128:	8c 83       	std	Y+4, r24	; 0x04
        HLCD_Void_GetArrayAndNumOfElement(contor,&num_character,&result);
        
        Hlcd_Voidcalc(contor,num_character);
    

        while(pressed_key==key12)
    312a:	8c 81       	ldd	r24, Y+4	; 0x04
    312c:	8c 30       	cpi	r24, 0x0C	; 12
    312e:	d1 f3       	breq	.-12     	; 0x3124 <main+0x72>
    3130:	e7 cf       	rjmp	.-50     	; 0x3100 <main+0x4e>

00003132 <__udivmodqi4>:
    3132:	99 1b       	sub	r25, r25
    3134:	79 e0       	ldi	r23, 0x09	; 9
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <__udivmodqi4_ep>

00003138 <__udivmodqi4_loop>:
    3138:	99 1f       	adc	r25, r25
    313a:	96 17       	cp	r25, r22
    313c:	08 f0       	brcs	.+2      	; 0x3140 <__udivmodqi4_ep>
    313e:	96 1b       	sub	r25, r22

00003140 <__udivmodqi4_ep>:
    3140:	88 1f       	adc	r24, r24
    3142:	7a 95       	dec	r23
    3144:	c9 f7       	brne	.-14     	; 0x3138 <__udivmodqi4_loop>
    3146:	80 95       	com	r24
    3148:	08 95       	ret

0000314a <__udivmodhi4>:
    314a:	aa 1b       	sub	r26, r26
    314c:	bb 1b       	sub	r27, r27
    314e:	51 e1       	ldi	r21, 0x11	; 17
    3150:	07 c0       	rjmp	.+14     	; 0x3160 <__udivmodhi4_ep>

00003152 <__udivmodhi4_loop>:
    3152:	aa 1f       	adc	r26, r26
    3154:	bb 1f       	adc	r27, r27
    3156:	a6 17       	cp	r26, r22
    3158:	b7 07       	cpc	r27, r23
    315a:	10 f0       	brcs	.+4      	; 0x3160 <__udivmodhi4_ep>
    315c:	a6 1b       	sub	r26, r22
    315e:	b7 0b       	sbc	r27, r23

00003160 <__udivmodhi4_ep>:
    3160:	88 1f       	adc	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	5a 95       	dec	r21
    3166:	a9 f7       	brne	.-22     	; 0x3152 <__udivmodhi4_loop>
    3168:	80 95       	com	r24
    316a:	90 95       	com	r25
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	08 95       	ret

00003172 <__divmodhi4>:
    3172:	97 fb       	bst	r25, 7
    3174:	09 2e       	mov	r0, r25
    3176:	07 26       	eor	r0, r23
    3178:	0a d0       	rcall	.+20     	; 0x318e <__divmodhi4_neg1>
    317a:	77 fd       	sbrc	r23, 7
    317c:	04 d0       	rcall	.+8      	; 0x3186 <__divmodhi4_neg2>
    317e:	e5 df       	rcall	.-54     	; 0x314a <__udivmodhi4>
    3180:	06 d0       	rcall	.+12     	; 0x318e <__divmodhi4_neg1>
    3182:	00 20       	and	r0, r0
    3184:	1a f4       	brpl	.+6      	; 0x318c <__divmodhi4_exit>

00003186 <__divmodhi4_neg2>:
    3186:	70 95       	com	r23
    3188:	61 95       	neg	r22
    318a:	7f 4f       	sbci	r23, 0xFF	; 255

0000318c <__divmodhi4_exit>:
    318c:	08 95       	ret

0000318e <__divmodhi4_neg1>:
    318e:	f6 f7       	brtc	.-4      	; 0x318c <__divmodhi4_exit>
    3190:	90 95       	com	r25
    3192:	81 95       	neg	r24
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	08 95       	ret

00003198 <__prologue_saves__>:
    3198:	2f 92       	push	r2
    319a:	3f 92       	push	r3
    319c:	4f 92       	push	r4
    319e:	5f 92       	push	r5
    31a0:	6f 92       	push	r6
    31a2:	7f 92       	push	r7
    31a4:	8f 92       	push	r8
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	ca 1b       	sub	r28, r26
    31c2:	db 0b       	sbc	r29, r27
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	09 94       	ijmp

000031d0 <__epilogue_restores__>:
    31d0:	2a 88       	ldd	r2, Y+18	; 0x12
    31d2:	39 88       	ldd	r3, Y+17	; 0x11
    31d4:	48 88       	ldd	r4, Y+16	; 0x10
    31d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31da:	7d 84       	ldd	r7, Y+13	; 0x0d
    31dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31de:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e2:	b9 84       	ldd	r11, Y+9	; 0x09
    31e4:	c8 84       	ldd	r12, Y+8	; 0x08
    31e6:	df 80       	ldd	r13, Y+7	; 0x07
    31e8:	ee 80       	ldd	r14, Y+6	; 0x06
    31ea:	fd 80       	ldd	r15, Y+5	; 0x05
    31ec:	0c 81       	ldd	r16, Y+4	; 0x04
    31ee:	1b 81       	ldd	r17, Y+3	; 0x03
    31f0:	aa 81       	ldd	r26, Y+2	; 0x02
    31f2:	b9 81       	ldd	r27, Y+1	; 0x01
    31f4:	ce 0f       	add	r28, r30
    31f6:	d1 1d       	adc	r29, r1
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	ed 01       	movw	r28, r26
    3204:	08 95       	ret

00003206 <malloc>:
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	bc 01       	movw	r22, r24
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	91 05       	cpc	r25, r1
    3210:	10 f4       	brcc	.+4      	; 0x3216 <malloc+0x10>
    3212:	62 e0       	ldi	r22, 0x02	; 2
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	a0 91 78 00 	lds	r26, 0x0078
    321a:	b0 91 79 00 	lds	r27, 0x0079
    321e:	ed 01       	movw	r28, r26
    3220:	e0 e0       	ldi	r30, 0x00	; 0
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	21 c0       	rjmp	.+66     	; 0x326c <malloc+0x66>
    322a:	88 81       	ld	r24, Y
    322c:	99 81       	ldd	r25, Y+1	; 0x01
    322e:	86 17       	cp	r24, r22
    3230:	97 07       	cpc	r25, r23
    3232:	69 f4       	brne	.+26     	; 0x324e <malloc+0x48>
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	9b 81       	ldd	r25, Y+3	; 0x03
    3238:	30 97       	sbiw	r30, 0x00	; 0
    323a:	19 f0       	breq	.+6      	; 0x3242 <malloc+0x3c>
    323c:	93 83       	std	Z+3, r25	; 0x03
    323e:	82 83       	std	Z+2, r24	; 0x02
    3240:	04 c0       	rjmp	.+8      	; 0x324a <malloc+0x44>
    3242:	90 93 79 00 	sts	0x0079, r25
    3246:	80 93 78 00 	sts	0x0078, r24
    324a:	fe 01       	movw	r30, r28
    324c:	34 c0       	rjmp	.+104    	; 0x32b6 <malloc+0xb0>
    324e:	68 17       	cp	r22, r24
    3250:	79 07       	cpc	r23, r25
    3252:	38 f4       	brcc	.+14     	; 0x3262 <malloc+0x5c>
    3254:	41 15       	cp	r20, r1
    3256:	51 05       	cpc	r21, r1
    3258:	19 f0       	breq	.+6      	; 0x3260 <malloc+0x5a>
    325a:	84 17       	cp	r24, r20
    325c:	95 07       	cpc	r25, r21
    325e:	08 f4       	brcc	.+2      	; 0x3262 <malloc+0x5c>
    3260:	ac 01       	movw	r20, r24
    3262:	fe 01       	movw	r30, r28
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	9c 01       	movw	r18, r24
    326a:	e9 01       	movw	r28, r18
    326c:	20 97       	sbiw	r28, 0x00	; 0
    326e:	e9 f6       	brne	.-70     	; 0x322a <malloc+0x24>
    3270:	41 15       	cp	r20, r1
    3272:	51 05       	cpc	r21, r1
    3274:	a9 f1       	breq	.+106    	; 0x32e0 <malloc+0xda>
    3276:	ca 01       	movw	r24, r20
    3278:	86 1b       	sub	r24, r22
    327a:	97 0b       	sbc	r25, r23
    327c:	04 97       	sbiw	r24, 0x04	; 4
    327e:	08 f4       	brcc	.+2      	; 0x3282 <malloc+0x7c>
    3280:	ba 01       	movw	r22, r20
    3282:	e0 e0       	ldi	r30, 0x00	; 0
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	2a c0       	rjmp	.+84     	; 0x32dc <malloc+0xd6>
    3288:	8d 91       	ld	r24, X+
    328a:	9c 91       	ld	r25, X
    328c:	11 97       	sbiw	r26, 0x01	; 1
    328e:	84 17       	cp	r24, r20
    3290:	95 07       	cpc	r25, r21
    3292:	f9 f4       	brne	.+62     	; 0x32d2 <malloc+0xcc>
    3294:	64 17       	cp	r22, r20
    3296:	75 07       	cpc	r23, r21
    3298:	81 f4       	brne	.+32     	; 0x32ba <malloc+0xb4>
    329a:	12 96       	adiw	r26, 0x02	; 2
    329c:	8d 91       	ld	r24, X+
    329e:	9c 91       	ld	r25, X
    32a0:	13 97       	sbiw	r26, 0x03	; 3
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	19 f0       	breq	.+6      	; 0x32ac <malloc+0xa6>
    32a6:	93 83       	std	Z+3, r25	; 0x03
    32a8:	82 83       	std	Z+2, r24	; 0x02
    32aa:	04 c0       	rjmp	.+8      	; 0x32b4 <malloc+0xae>
    32ac:	90 93 79 00 	sts	0x0079, r25
    32b0:	80 93 78 00 	sts	0x0078, r24
    32b4:	fd 01       	movw	r30, r26
    32b6:	32 96       	adiw	r30, 0x02	; 2
    32b8:	4f c0       	rjmp	.+158    	; 0x3358 <malloc+0x152>
    32ba:	ca 01       	movw	r24, r20
    32bc:	86 1b       	sub	r24, r22
    32be:	97 0b       	sbc	r25, r23
    32c0:	fd 01       	movw	r30, r26
    32c2:	e8 0f       	add	r30, r24
    32c4:	f9 1f       	adc	r31, r25
    32c6:	61 93       	st	Z+, r22
    32c8:	71 93       	st	Z+, r23
    32ca:	02 97       	sbiw	r24, 0x02	; 2
    32cc:	8d 93       	st	X+, r24
    32ce:	9c 93       	st	X, r25
    32d0:	43 c0       	rjmp	.+134    	; 0x3358 <malloc+0x152>
    32d2:	fd 01       	movw	r30, r26
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	9c 01       	movw	r18, r24
    32da:	d9 01       	movw	r26, r18
    32dc:	10 97       	sbiw	r26, 0x00	; 0
    32de:	a1 f6       	brne	.-88     	; 0x3288 <malloc+0x82>
    32e0:	80 91 76 00 	lds	r24, 0x0076
    32e4:	90 91 77 00 	lds	r25, 0x0077
    32e8:	89 2b       	or	r24, r25
    32ea:	41 f4       	brne	.+16     	; 0x32fc <malloc+0xf6>
    32ec:	80 91 6a 00 	lds	r24, 0x006A
    32f0:	90 91 6b 00 	lds	r25, 0x006B
    32f4:	90 93 77 00 	sts	0x0077, r25
    32f8:	80 93 76 00 	sts	0x0076, r24
    32fc:	40 91 6c 00 	lds	r20, 0x006C
    3300:	50 91 6d 00 	lds	r21, 0x006D
    3304:	41 15       	cp	r20, r1
    3306:	51 05       	cpc	r21, r1
    3308:	41 f4       	brne	.+16     	; 0x331a <malloc+0x114>
    330a:	4d b7       	in	r20, 0x3d	; 61
    330c:	5e b7       	in	r21, 0x3e	; 62
    330e:	80 91 68 00 	lds	r24, 0x0068
    3312:	90 91 69 00 	lds	r25, 0x0069
    3316:	48 1b       	sub	r20, r24
    3318:	59 0b       	sbc	r21, r25
    331a:	20 91 76 00 	lds	r18, 0x0076
    331e:	30 91 77 00 	lds	r19, 0x0077
    3322:	24 17       	cp	r18, r20
    3324:	35 07       	cpc	r19, r21
    3326:	b0 f4       	brcc	.+44     	; 0x3354 <malloc+0x14e>
    3328:	ca 01       	movw	r24, r20
    332a:	82 1b       	sub	r24, r18
    332c:	93 0b       	sbc	r25, r19
    332e:	86 17       	cp	r24, r22
    3330:	97 07       	cpc	r25, r23
    3332:	80 f0       	brcs	.+32     	; 0x3354 <malloc+0x14e>
    3334:	ab 01       	movw	r20, r22
    3336:	4e 5f       	subi	r20, 0xFE	; 254
    3338:	5f 4f       	sbci	r21, 0xFF	; 255
    333a:	84 17       	cp	r24, r20
    333c:	95 07       	cpc	r25, r21
    333e:	50 f0       	brcs	.+20     	; 0x3354 <malloc+0x14e>
    3340:	42 0f       	add	r20, r18
    3342:	53 1f       	adc	r21, r19
    3344:	50 93 77 00 	sts	0x0077, r21
    3348:	40 93 76 00 	sts	0x0076, r20
    334c:	f9 01       	movw	r30, r18
    334e:	61 93       	st	Z+, r22
    3350:	71 93       	st	Z+, r23
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <malloc+0x152>
    3354:	e0 e0       	ldi	r30, 0x00	; 0
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	cf 01       	movw	r24, r30
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <free>:
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	09 f4       	brne	.+2      	; 0x336a <free+0xa>
    3368:	50 c0       	rjmp	.+160    	; 0x340a <free+0xaa>
    336a:	ec 01       	movw	r28, r24
    336c:	22 97       	sbiw	r28, 0x02	; 2
    336e:	1b 82       	std	Y+3, r1	; 0x03
    3370:	1a 82       	std	Y+2, r1	; 0x02
    3372:	a0 91 78 00 	lds	r26, 0x0078
    3376:	b0 91 79 00 	lds	r27, 0x0079
    337a:	10 97       	sbiw	r26, 0x00	; 0
    337c:	09 f1       	breq	.+66     	; 0x33c0 <free+0x60>
    337e:	40 e0       	ldi	r20, 0x00	; 0
    3380:	50 e0       	ldi	r21, 0x00	; 0
    3382:	ac 17       	cp	r26, r28
    3384:	bd 07       	cpc	r27, r29
    3386:	08 f1       	brcs	.+66     	; 0x33ca <free+0x6a>
    3388:	bb 83       	std	Y+3, r27	; 0x03
    338a:	aa 83       	std	Y+2, r26	; 0x02
    338c:	fe 01       	movw	r30, r28
    338e:	21 91       	ld	r18, Z+
    3390:	31 91       	ld	r19, Z+
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	ae 17       	cp	r26, r30
    3398:	bf 07       	cpc	r27, r31
    339a:	79 f4       	brne	.+30     	; 0x33ba <free+0x5a>
    339c:	8d 91       	ld	r24, X+
    339e:	9c 91       	ld	r25, X
    33a0:	11 97       	sbiw	r26, 0x01	; 1
    33a2:	28 0f       	add	r18, r24
    33a4:	39 1f       	adc	r19, r25
    33a6:	2e 5f       	subi	r18, 0xFE	; 254
    33a8:	3f 4f       	sbci	r19, 0xFF	; 255
    33aa:	39 83       	std	Y+1, r19	; 0x01
    33ac:	28 83       	st	Y, r18
    33ae:	12 96       	adiw	r26, 0x02	; 2
    33b0:	8d 91       	ld	r24, X+
    33b2:	9c 91       	ld	r25, X
    33b4:	13 97       	sbiw	r26, 0x03	; 3
    33b6:	9b 83       	std	Y+3, r25	; 0x03
    33b8:	8a 83       	std	Y+2, r24	; 0x02
    33ba:	41 15       	cp	r20, r1
    33bc:	51 05       	cpc	r21, r1
    33be:	71 f4       	brne	.+28     	; 0x33dc <free+0x7c>
    33c0:	d0 93 79 00 	sts	0x0079, r29
    33c4:	c0 93 78 00 	sts	0x0078, r28
    33c8:	20 c0       	rjmp	.+64     	; 0x340a <free+0xaa>
    33ca:	12 96       	adiw	r26, 0x02	; 2
    33cc:	8d 91       	ld	r24, X+
    33ce:	9c 91       	ld	r25, X
    33d0:	13 97       	sbiw	r26, 0x03	; 3
    33d2:	ad 01       	movw	r20, r26
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	11 f0       	breq	.+4      	; 0x33dc <free+0x7c>
    33d8:	dc 01       	movw	r26, r24
    33da:	d3 cf       	rjmp	.-90     	; 0x3382 <free+0x22>
    33dc:	fa 01       	movw	r30, r20
    33de:	d3 83       	std	Z+3, r29	; 0x03
    33e0:	c2 83       	std	Z+2, r28	; 0x02
    33e2:	21 91       	ld	r18, Z+
    33e4:	31 91       	ld	r19, Z+
    33e6:	e2 0f       	add	r30, r18
    33e8:	f3 1f       	adc	r31, r19
    33ea:	ce 17       	cp	r28, r30
    33ec:	df 07       	cpc	r29, r31
    33ee:	69 f4       	brne	.+26     	; 0x340a <free+0xaa>
    33f0:	88 81       	ld	r24, Y
    33f2:	99 81       	ldd	r25, Y+1	; 0x01
    33f4:	28 0f       	add	r18, r24
    33f6:	39 1f       	adc	r19, r25
    33f8:	2e 5f       	subi	r18, 0xFE	; 254
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	fa 01       	movw	r30, r20
    33fe:	31 83       	std	Z+1, r19	; 0x01
    3400:	20 83       	st	Z, r18
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	9b 81       	ldd	r25, Y+3	; 0x03
    3406:	93 83       	std	Z+3, r25	; 0x03
    3408:	82 83       	std	Z+2, r24	; 0x02
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	08 95       	ret

00003410 <_exit>:
    3410:	f8 94       	cli

00003412 <__stop_program>:
    3412:	ff cf       	rjmp	.-2      	; 0x3412 <__stop_program>
